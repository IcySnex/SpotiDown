<doc>
    <assembly>
        <name>Xamarin.Essentials</name>
    </assembly>
    <members>
        <member name="T:Xamarin.Essentials.Accelerometer">
            <summary>
                <para>Accelerometer data of the acceleration of the device in three dimensional space.</para>
            </summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.Accelerometer.IsMonitoring">
            <summary>Gets if accelerometer is being monitored.</summary>
            <value>If monitoring.</value>
            <remarks />
        </member>
        <member name="E:Xamarin.Essentials.Accelerometer.ReadingChanged">
            <summary>Event triggered when reading of sensor changes.</summary>
            <remarks />
        </member>
        <member name="E:Xamarin.Essentials.Accelerometer.ShakeDetected">
            <summary>Event triggered when a shake has been detected on the device.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Accelerometer.Start(Xamarin.Essentials.SensorSpeed)">
            <param name="sensorSpeed">
                <para>Speed to monitor the sensor.</para>
            </param>
            <summary>Start monitoring for changes to accelerometer.</summary>
            <remarks>Will throw FeatureNotSupportedException if not supported on device. Will throw ArgumentNullException if handler is null.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Accelerometer.Stop">
            <summary>Stop monitoring for changes to accelerometer.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.AccelerometerChangedEventArgs">
            <summary>Event arguments containing the current reading.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.AccelerometerChangedEventArgs(Xamarin.Essentials.AccelerometerData)">
            <param name="reading">The accelerometer data reading.</param>
            <summary>Public constructor that takes in a reading for event arguments.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.AccelerometerChangedEventArgs.Reading">
            <summary>The current values of accelerometer.</summary>
            <value>The reading.</value>
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.AccelerometerData">
            <summary>Data representing the devies' three accelerometers.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.AccelerometerData(System.Double,System.Double,System.Double)">
            <param name="x">X data</param>
            <param name="y">Y data</param>
            <param name="z">Z data</param>
            <summary>Public constructor for accelerometer data.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Essentials.AccelerometerData(System.Single,System.Single,System.Single)">
            <param name="x">X data</param>
            <param name="y">Y data</param>
            <param name="z">X data</param>
            <summary>Public constructor for accelerometer data.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.AccelerometerData.Acceleration">
            <summary>Gets the acceleration vector in G's (gravitational force). </summary>
            <value />
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.AccelerometerData.Equals(System.Object)">
            <param name="obj">Object to compare</param>
            <summary>If equal to another object</summary>
            <returns>If equal</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.AccelerometerData.Equals(Xamarin.Essentials.AccelerometerData)">
            <param name="other">Other AccelerometerData to compare with.</param>
            <summary>Compares the underlying Vector3 instances.</summary>
            <returns>True if they are equal, otherwise false.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.AccelerometerData.GetHashCode">
            <summary>Get the hash code for object.</summary>
            <returns>The hash code</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.AccelerometerData.op_Equality(Xamarin.Essentials.AccelerometerData,Xamarin.Essentials.AccelerometerData)">
            <param name="left">Left to compare</param>
            <param name="right">Right to compare</param>
            <summary>Equality operator for equals</summary>
            <returns>If equal</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.AccelerometerData.op_Inequality(Xamarin.Essentials.AccelerometerData,Xamarin.Essentials.AccelerometerData)">
            <param name="left">Left to check</param>
            <param name="right">Right to check</param>
            <summary>Inequality check</summary>
            <returns>If not equal</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.AccelerometerData.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.ActivityState">
            <summary>A state of an Android Activity.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Essentials.ActivityState.Created">
            <summary>An Activity is in the OnCreate state</summary>
        </member>
        <member name="F:Xamarin.Essentials.ActivityState.Destroyed">
            <summary>An Activity is in the OnDestroyed state</summary>
        </member>
        <member name="F:Xamarin.Essentials.ActivityState.Paused">
            <summary>An Activity is in the OnPaused state</summary>
        </member>
        <member name="F:Xamarin.Essentials.ActivityState.Resumed">
            <summary>An Activity is in the OnResumed state</summary>
        </member>
        <member name="F:Xamarin.Essentials.ActivityState.SaveInstanceState">
            <summary>An Activity is in the SaveInstanceState state</summary>
        </member>
        <member name="F:Xamarin.Essentials.ActivityState.Started">
            <summary>An Activity is in the OnStarted state</summary>
        </member>
        <member name="F:Xamarin.Essentials.ActivityState.Stopped">
            <summary>An Activity is in the OnStopped state</summary>
        </member>
        <member name="T:Xamarin.Essentials.ActivityStateChangedEventArgs">
            <summary>Event argments when an Android Activity's state changes.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.ActivityStateChangedEventArgs.Activity">
            <summary>Gets the Activity of which the state changed.</summary>
            <value>The Activity for the event.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.ActivityStateChangedEventArgs.State">
            <summary>The state of the Activity.</summary>
            <value>The state of the Activity for the event.</value>
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.AltitudeReferenceSystem">
            <summary>Indicates the altitude reference system to be used in defining a location.</summary>
            <remarks>
                <para>This enum is a copy of Windows.Devices.Geolocation.AltitudeReferenceSystem.</para>
            </remarks>
        </member>
        <member name="F:Xamarin.Essentials.AltitudeReferenceSystem.Ellipsoid">
            <summary>The altitude reference system is based on an ellipsoid (usually WGS84), which is a mathematical approximation of the shape of the Earth.</summary>
        </member>
        <member name="F:Xamarin.Essentials.AltitudeReferenceSystem.Geoid">
            <summary>The altitude reference system is based on the distance above sea level (parametrized by a so-called Geoid).</summary>
        </member>
        <member name="F:Xamarin.Essentials.AltitudeReferenceSystem.Surface">
            <summary>The altitude reference system is based on the distance above the tallest surface structures, such as buildings, trees, roads, etc., above terrain or ground level.</summary>
        </member>
        <member name="F:Xamarin.Essentials.AltitudeReferenceSystem.Terrain">
            <summary>The altitude reference system is based on distance above terrain or ground level.</summary>
        </member>
        <member name="F:Xamarin.Essentials.AltitudeReferenceSystem.Unspecified">
            <summary>The altitude reference system was not specified.</summary>
        </member>
        <member name="T:Xamarin.Essentials.AppAction">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Essentials.AppAction(System.String,System.String,System.String,System.String)">
            <param name="id">To be added.</param>
            <param name="title">To be added.</param>
            <param name="subtitle">To be added.</param>
            <param name="icon">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.AppAction.Id">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.AppAction.Subtitle">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.AppAction.Title">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.AppActionEventArgs">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Essentials.AppActionEventArgs(Xamarin.Essentials.AppAction)">
            <param name="appAction">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.AppActionEventArgs.AppAction">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.AppActions">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.AppActions.GetAsync">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.AppActions.IconDirectory">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.AppActions.IconExtension">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="E:Xamarin.Essentials.AppActions.OnAppAction">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.AppActions.SetAsync(System.Collections.Generic.IEnumerable{Xamarin.Essentials.AppAction})">
            <param name="actions">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.AppActions.SetAsync(Xamarin.Essentials.AppAction[])">
            <param name="actions">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.AppInfo">
            <summary>Represents information about the application.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.AppInfo.BuildString">
            <summary>Gets the application build number.</summary>
            <value>The application build number.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.AppInfo.Name">
            <summary>Gets the application name.</summary>
            <value>The application name.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.AppInfo.PackageName">
            <summary>Gets the application package name or identifier.</summary>
            <value>The package name or identifier.</value>
            <remarks>On Android and iOS, this is the application package name. On UWP, this is the application GUID.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.AppInfo.RequestedTheme">
            <summary>Gets the detected Theme of the system or application.</summary>
            <value>The Theme.</value>
            <remarks>For platforms or platform versions which aren't supported, Unspecified is returned.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.AppInfo.ShowSettingsUI">
            <summary>Open the settings menu or page for the application.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.AppInfo.Version">
            <summary>Gets the application version.</summary>
            <value>The application version.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.AppInfo.VersionString">
            <summary>Gets the application version.</summary>
            <value>The application version.</value>
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.AppleSignInAuthenticator">
            <summary>Native Apple Sign In authentication API.</summary>
            <remarks>This API is only supported on iOS 13.0+ and should not be called on other devices at runtime.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.AppleSignInAuthenticator.AuthenticateAsync(Xamarin.Essentials.AppleSignInAuthenticator+Options)">
            <param name="options">Additional Sign In options.</param>
            <summary>Performs a native Apple Sign In authentication request.</summary>
            <returns />
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.AppleSignInAuthenticator+Options">
            <summary>Options for Native Apple Sign In</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.AppleSignInAuthenticator+Options">
            <summary />
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.AppleSignInAuthenticator+Options.IncludeEmailScope">
            <summary>Include email scope.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.AppleSignInAuthenticator+Options.IncludeFullNameScope">
            <summary>Include full name scope.</summary>
            <value />
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.AppTheme">
            <summary>Application Theme Type</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Essentials.AppTheme.Dark">
            <summary>Dark Theme</summary>
        </member>
        <member name="F:Xamarin.Essentials.AppTheme.Light">
            <summary>Light Theme</summary>
        </member>
        <member name="F:Xamarin.Essentials.AppTheme.Unspecified">
            <summary>Default, Unknown or Unspecified Theme</summary>
        </member>
        <member name="T:Xamarin.Essentials.Barometer">
            <summary>Monitor changes to the atmospheric pressure.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.Barometer.IsMonitoring">
            <summary>Gets if barometer is actively being monitored.</summary>
            <value>If barometer is being monitored.</value>
            <remarks />
        </member>
        <member name="E:Xamarin.Essentials.Barometer.ReadingChanged">
            <summary>Event triggered when barometer reading changes.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Barometer.Start(Xamarin.Essentials.SensorSpeed)">
            <param name="sensorSpeed">The speed to listen for changes.</param>
            <summary>Start monitoring for changes to the barometer.</summary>
            <remarks>Will throw FeatureNotSupportedException if not supported on device.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Barometer.Stop">
            <summary>Stop monitoring for changes to the barometer.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.BarometerChangedEventArgs">
            <summary>The current pressure information from the change event.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.BarometerChangedEventArgs(Xamarin.Essentials.BarometerData)">
            <param name="reading">The current reading</param>
            <summary>Public constructor for barometer changed event args.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.BarometerChangedEventArgs.Reading">
            <summary>Gets the current barometer pressure data</summary>
            <value>Pressure in hPA</value>
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.BarometerData">
            <summary>
                <para>Contains the pressure measured by the user's device.</para>
            </summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.BarometerData(System.Double)">
            <param name="pressure">The current pressure</param>
            <summary>Public constructor for barometer data.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.BarometerData.Equals(System.Object)">
            <param name="obj">Object to compare</param>
            <summary>If equal to another object</summary>
            <returns>If equal</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.BarometerData.Equals(Xamarin.Essentials.BarometerData)">
            <param name="other">Other object to compare</param>
            <summary>If equal to another object</summary>
            <returns>If equal</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.BarometerData.GetHashCode">
            <summary>Get has code for object.</summary>
            <returns>The hash code.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.BarometerData.op_Equality(Xamarin.Essentials.BarometerData,Xamarin.Essentials.BarometerData)">
            <param name="left">Left to compare</param>
            <param name="right">Right to compare</param>
            <summary>If equal to another object</summary>
            <returns>If equal</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.BarometerData.op_Inequality(Xamarin.Essentials.BarometerData,Xamarin.Essentials.BarometerData)">
            <param name="left">Left to comapre</param>
            <param name="right">Right to comapre</param>
            <summary>If not equal to another object</summary>
            <returns>If not equal</returns>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.BarometerData.PressureInHectopascals">
            <summary>Gets the current pressure in hectopascals.</summary>
            <value />
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.BarometerData.ToString">
            <summary>Outputs the data as a string.</summary>
            <returns />
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.Battery">
            <summary>Methods and properties for battery and charging information of the device.</summary>
            <remarks>
                <para>Platform specific remarks:</para>
                <para>- Android: Battery_Stats permission must be set in manifest.</para>
                <para>- iOS: Simulator will not return battery information, must be run on device</para>
                <para>- UWP: None</para>
            </remarks>
        </member>
        <member name="E:Xamarin.Essentials.Battery.BatteryInfoChanged">
            <summary>Event trigger when battery properties have changed.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.Battery.ChargeLevel">
            <summary>Gets the current charge level of the device from 0.0 to 1.0.</summary>
            <value>
                <para>Level of charge. Returns -1 if no battery exists.</para>
            </value>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.Battery.EnergySaverStatus">
            <summary>Gets the current energy saver status of the device.</summary>
            <value>The current status of energy saver mode.</value>
            <remarks />
        </member>
        <member name="E:Xamarin.Essentials.Battery.EnergySaverStatusChanged">
            <summary>Event that is triggered when energy saver status changes.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.Battery.PowerSource">
            <summary>Gets the current power source for the device.</summary>
            <value>
                <para>Power source, or uknown.</para>
            </value>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.Battery.State">
            <summary>Gets the charging state of the device if it can be determined.</summary>
            <value>Battery state, or unknown.</value>
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.BatteryInfoChangedEventArgs">
            <summary>Battery changed information.</summary>
            <remarks>Returns the current information of the battery.</remarks>
        </member>
        <member name="C:Xamarin.Essentials.BatteryInfoChangedEventArgs(System.Double,Xamarin.Essentials.BatteryState,Xamarin.Essentials.BatteryPowerSource)">
            <param name="level">The current level of the batter.</param>
            <param name="state">The state of the battery</param>
            <param name="source">The source of the battery</param>
            <summary>The public constructor.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.BatteryInfoChangedEventArgs.ChargeLevel">
            <summary>Gets the current charge level of the device from 0.0 to 1.0.</summary>
            <value>Level of charge.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.BatteryInfoChangedEventArgs.PowerSource">
            <summary>Gets the current power source for the device.</summary>
            <value>Power source, or unknown</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.BatteryInfoChangedEventArgs.State">
            <summary>Gets the charging state of the device if it can be determined.</summary>
            <value>Battery state, or unknown.</value>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.BatteryInfoChangedEventArgs.ToString">
            <summary>Outputs the data as a string.</summary>
            <returns />
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.BatteryPowerSource">
            <summary>How the device and battery are currently being powered or charged.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Essentials.BatteryPowerSource.AC">
            <summary>Power source is an AC Charger.</summary>
        </member>
        <member name="F:Xamarin.Essentials.BatteryPowerSource.Battery">
            <summary>Power source is the battery and not being charge.</summary>
        </member>
        <member name="F:Xamarin.Essentials.BatteryPowerSource.Unknown">
            <summary>Power source can not be determined.</summary>
        </member>
        <member name="F:Xamarin.Essentials.BatteryPowerSource.Usb">
            <summary>Power source is a USB port.</summary>
        </member>
        <member name="F:Xamarin.Essentials.BatteryPowerSource.Wireless">
            <summary>Power source is wireless.</summary>
        </member>
        <member name="T:Xamarin.Essentials.BatteryState">
            <summary>The current state of the battery and if it is being charged or full.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Essentials.BatteryState.Charging">
            <summary>Battery is acively being charged by a power source.</summary>
        </member>
        <member name="F:Xamarin.Essentials.BatteryState.Discharging">
            <summary>Battery is not plugged in and discharging.</summary>
        </member>
        <member name="F:Xamarin.Essentials.BatteryState.Full">
            <summary>Battery is full.</summary>
        </member>
        <member name="F:Xamarin.Essentials.BatteryState.NotCharging">
            <summary>Battery is not charging or discharging, but in an inbetween state.</summary>
        </member>
        <member name="F:Xamarin.Essentials.BatteryState.NotPresent">
            <summary>Battery does not exist on the device.</summary>
        </member>
        <member name="F:Xamarin.Essentials.BatteryState.Unknown">
            <summary>Battery state could not be determined.</summary>
        </member>
        <member name="T:Xamarin.Essentials.Browser">
            <summary>Provides a way to display a web page inside an app.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Browser.OpenAsync(System.String)">
            <param name="uri">Uri to launch.</param>
            <summary>Open the browser to specified uri.</summary>
            <returns>Completed task when browser is launched, but not necessarily closed.  Result indicates if launching was successful or not.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Browser.OpenAsync(System.Uri)">
            <param name="uri">Uri to launch.</param>
            <summary>Open the browser to specified uri.</summary>
            <returns>Completed task when browser is launched, but not necessarily closed.  Result indicates if launching was successful or not.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Browser.OpenAsync(System.String,Xamarin.Essentials.BrowserLaunchMode)">
            <param name="uri">Uri to launch.</param>
            <param name="launchMode">How to launch the browser.</param>
            <summary>Open the browser to specified uri.</summary>
            <returns>Completed task when browser is launched, but not necessarily closed.  Result indicates if launching was successful or not.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Browser.OpenAsync(System.String,Xamarin.Essentials.BrowserLaunchOptions)">
            <param name="uri">Uri to launch.</param>
            <param name="options">Launch options for the browser.</param>
            <summary>Open the browser to specified uri.</summary>
            <returns>Completed task when browser is launched, but not necessarily closed.  Result indicates if launching was successful or not.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Browser.OpenAsync(System.Uri,Xamarin.Essentials.BrowserLaunchMode)">
            <param name="uri">Uri to launch.</param>
            <param name="launchMode">How to launch the browser.</param>
            <summary>Open the browser to specified uri.</summary>
            <returns>Completed task when browser is launched, but not necessarily closed.  Result indicates if launching was successful or not.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Browser.OpenAsync(System.Uri,Xamarin.Essentials.BrowserLaunchOptions)">
            <param name="uri">Uri to launch.</param>
            <param name="options">Launch options for the browser.</param>
            <summary>Open the browser to specified uri.</summary>
            <returns>Completed task when browser is launched, but not necessarily closed.  Result indicates if launching was successful or not.</returns>
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.BrowserLaunchFlags">
            <summary>Additional flags that can be set to control how the browser opens.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Essentials.BrowserLaunchFlags.LaunchAdjacent">
            <summary>On Android to launch the new activity adjacent to the current one if available.</summary>
        </member>
        <member name="F:Xamarin.Essentials.BrowserLaunchFlags.None">
            <summary>No additional flags. This is the default.</summary>
        </member>
        <member name="F:Xamarin.Essentials.BrowserLaunchFlags.PresentAsFormSheet">
            <summary>On iOS to launch the browser as a form sheet with system preferred browser where supported.</summary>
        </member>
        <member name="F:Xamarin.Essentials.BrowserLaunchFlags.PresentAsPageSheet">
            <summary>On iOS to launch the browser as a page sheet with system preferred browser where supported.</summary>
        </member>
        <member name="T:Xamarin.Essentials.BrowserLaunchMode">
            <summary>Launch type of the browser.</summary>
            <remarks>Recommended to use the SystemBrowser as it is the default and falls back to UriLauncher.</remarks>
        </member>
        <member name="F:Xamarin.Essentials.BrowserLaunchMode.External">
            <summary>Use the default external launcher to open the browser outside of the app.</summary>
        </member>
        <member name="F:Xamarin.Essentials.BrowserLaunchMode.SystemPreferred">
            <summary>Launch the optimized system browser and stay inside of your application. (Chrome Custom Tabs and SFSafariViewController).</summary>
        </member>
        <member name="T:Xamarin.Essentials.BrowserLaunchOptions">
            <summary>Optional setting to open the browser with.</summary>
            <remarks>These settings do not apply to all operation systems. Check documentation for more information.</remarks>
        </member>
        <member name="C:Xamarin.Essentials.BrowserLaunchOptions">
            <summary>Default constructor.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.BrowserLaunchOptions.Flags">
            <summary>Additional launch flags that may or may not take effect based on the device and launch mode.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.BrowserLaunchOptions.LaunchMode">
            <summary>Launch type of the browser.</summary>
            <value>The launch type.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.BrowserLaunchOptions.PreferredControlColor">
            <summary>Preferred color of the controls on the browser.</summary>
            <value>Gets the color for controls.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.BrowserLaunchOptions.PreferredToolbarColor">
            <summary>Preferred color of the background toolbar.</summary>
            <value>Gets the toolbar color.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.BrowserLaunchOptions.TitleMode">
            <summary>Preferred mode for the title display.</summary>
            <value>Gets the title display mode.</value>
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.BrowserTitleMode">
            <summary>Mode for the title.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Essentials.BrowserTitleMode.Default">
            <summary>Uses the system default showing it.</summary>
        </member>
        <member name="F:Xamarin.Essentials.BrowserTitleMode.Hide">
            <summary>
                <para>Hide the title.</para>
            </summary>
        </member>
        <member name="F:Xamarin.Essentials.BrowserTitleMode.Show">
            <summary>Show the title.</summary>
        </member>
        <member name="T:Xamarin.Essentials.Clipboard">
            <summary>Provides a way to work with text on the device clipboard.</summary>
            <remarks />
        </member>
        <member name="E:Xamarin.Essentials.Clipboard.ClipboardContentChanged">
            <summary>Fires when the clipboard content changes.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Clipboard.GetTextAsync">
            <summary>Returns any text that is on the clipboard.</summary>
            <returns>Returns text that is on the clipboard, or null if there is none.</returns>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.Clipboard.HasText">
            <summary>Gets a value indicating whether there is any text on the clipboard.</summary>
            <value />
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Clipboard.SetTextAsync(System.String)">
            <param name="text">The text to put on the clipboard.</param>
            <summary>Sets the contents of the clipboard to be the specified text.</summary>
            <returns>Returns text that is on the clipboard, or null if there is none.</returns>
            <remarks>This method returns immediately and does not guarentee that the text is on the clipboard by the time this method returns</remarks>
        </member>
        <member name="T:Xamarin.Essentials.ColorConverters">
            <summary>Contains several helper methods to convert System.Drawing.Color</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.ColorConverters.FromHex(System.String)">
            <param name="hex">A string value similar to the syntax used in HTML, eg "00FF00". Alpha can optionally be specified as the first pair of the characters ("CC00FF00").</param>
            <summary>Creates a new Color from a Hex string.</summary>
            <returns>A color from the Hex string.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.ColorConverters.FromHsl(System.Single,System.Single,System.Single)">
            <param name="hue">The hue of the color from 0-360.</param>
            <param name="saturation">The saturation of the color from 0-100.</param>
            <param name="luminosity">The luminosity of the color from 0-100.</param>
            <summary>Creates a new Color from hue, saturation, and lightness.</summary>
            <returns>A new color from the Hsla.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.ColorConverters.FromHsla(System.Single,System.Single,System.Single,System.Int32)">
            <param name="hue">The hue of the color from 0-360.</param>
            <param name="saturation">The saturation of the color from 0-100.</param>
            <param name="luminosity">The luminosity of the color from 0-100.</param>
            <param name="alpha">The alpha of the color from 0-255.</param>
            <summary>Creates a new Color from hue, saturation, luminosity, and alpha.</summary>
            <returns>A new color from the Hsla.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.ColorConverters.FromUInt(System.UInt32)">
            <param name="argb">A single value representing argb.</param>
            <summary>Creates a new Color from an UInt.</summary>
            <returns>A new color from the Uint</returns>
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.ColorExtensions">
            <summary>Extension methods for System.Drawing.Color</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.ColorExtensions.AddLuminosity(System.Drawing.Color,System.Single)">
            <param name="color">The color to add luminosity to.</param>
            <param name="delta">The delta to add to the current luminosity.</param>
            <summary>Adds luminosity to the existing color</summary>
            <returns>The new color.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.ColorExtensions.FromHsva(System.Double,System.Double,System.Double,System.Double)">
            <param name="h">The Hue value in double.</param>
            <param name="s">The Saturation value in double.</param>
            <param name="v">The Value value in double.</param>
            <param name="a">The Alpha value in double.</param>
            <summary>Convert HSVa color into System.Drawing.Color.</summary>
            <returns>System.Drawing.Color.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.ColorExtensions.GetComplementary(System.Drawing.Color)">
            <param name="color">A color to obtain the complement for.</param>
            <summary>Returns a new color that is on the opposite side of the color wheel from the original.</summary>
            <returns>A color that is the complement of the value passed in.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.ColorExtensions.MultiplyAlpha(System.Drawing.Color,System.Single)">
            <param name="color">The current color to manipulate.</param>
            <param name="percentage">The percentage from 0-1f</param>
            <summary>Multiplies the current alpha by a percentage (0-1f)</summary>
            <returns>The new color.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.ColorExtensions.ToHsv(System.Drawing.Color)">
            <param name="color">The current color to manipulate.</param>
            <summary>Convert a System.Drawing.Color struct into HSV Color.</summary>
            <returns>A tuple of doubles with the values of Hue, Saturation and Value, respectively.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.ColorExtensions.ToInt(System.Drawing.Color)">
            <param name="color">The color to convert</param>
            <summary>Converts the current color to an interger</summary>
            <returns>The color as an integer</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.ColorExtensions.ToSystemColor(Android.Graphics.Color)">
            <param name="color">The color to use as a base.</param>
            <summary>Converts the color to the system specific color.</summary>
            <returns>The system color.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.ColorExtensions.ToSystemColor(AppKit.NSColor)">
            <param name="color">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.ColorExtensions.ToSystemColor(UIKit.UIColor)">
            <param name="color">The color to use as a base.</param>
            <summary>Converts the color to the system specific color.</summary>
            <returns>The system color.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.ColorExtensions.ToSystemColor(Windows.UI.Color)">
            <param name="color">The color to use as a base.</param>
            <summary>Converts the color to the system specific color.</summary>
            <returns>The system color.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.ColorExtensions.ToUInt(System.Drawing.Color)">
            <param name="color">The color to use as a base.</param>
            <summary>Converts the color to a UInt representation.</summary>
            <returns>The UInt representation.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.ColorExtensions.WithAlpha(System.Drawing.Color,System.Int32)">
            <param name="color">The color to use as a base.</param>
            <param name="alpha">The alpha to set 0-255.</param>
            <summary>Creates a new color based on this color, but with a new alpha (0-255).</summary>
            <returns>The new color.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.ColorExtensions.WithHue(System.Drawing.Color,System.Single)">
            <param name="color">The color to use as a base.</param>
            <param name="hue">The hue to set 0-360.</param>
            <summary>Creates a new color based on this color, but with a new hue (0-360).</summary>
            <returns>The new color.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.ColorExtensions.WithLuminosity(System.Drawing.Color,System.Single)">
            <param name="color">The color to use as a base.</param>
            <param name="luminosity">The luminosity to set 0-100.</param>
            <summary>Creates a new color based on this color, but with a new luminosity (0-100).</summary>
            <returns>The new color.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.ColorExtensions.WithSaturation(System.Drawing.Color,System.Single)">
            <param name="color">The color to use as a base.</param>
            <param name="saturation">The saturation to set 0-100.</param>
            <summary>Creates a new color based on this color, but with a new saturation (0-100).</summary>
            <returns>The new color.</returns>
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.Compass">
            <summary>Monitor changes to the orientation of the user's device.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.Compass.IsMonitoring">
            <summary>Gets if compass is actively being monitored.</summary>
            <value>If compass is being monitored.</value>
            <remarks />
        </member>
        <member name="E:Xamarin.Essentials.Compass.ReadingChanged">
            <summary>Event triggered when compass reading changes.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.Compass.ShouldDisplayHeadingCalibration">
            <summary>Determines if the calibration screen should be displayed.</summary>
            <value>Gets or sets if this should be displayed when started.</value>
            <remarks>Only available on iOS</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Compass.Start(Xamarin.Essentials.SensorSpeed)">
            <param name="sensorSpeed">The speed to monitor for changes.</param>
            <summary>Start monitoring for changes to the compass.</summary>
            <remarks>Will throw FeatureNotSupportedException if not supported on device. Will throw ArgumentNullException if handler is null.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Compass.Start(Xamarin.Essentials.SensorSpeed,System.Boolean)">
            <param name="sensorSpeed">The speed to monitor for changes.</param>
            <param name="applyLowPassFilter">Whether or not to apply a moving average filter (only used on Android).</param>
            <summary>Start monitoring for changes to the compass.</summary>
            <remarks>Will throw FeatureNotSupportedException if not supported on device. Will throw ArgumentNullException if handler is null.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Compass.Stop">
            <summary>Stop monitoring for changes to the compass.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.CompassChangedEventArgs">
            <summary>Event arguments when compass reading changes.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.CompassChangedEventArgs(Xamarin.Essentials.CompassData)">
            <param name="reading">The current compass reading.</param>
            <summary>Public constructor</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.CompassChangedEventArgs.Reading">
            <summary>Gets the current reading.</summary>
            <value>The reading.</value>
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.CompassData">
            <summary>
                <para>Contains the orientation of the user's device.</para>
            </summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.CompassData(System.Double)">
            <param name="headingMagneticNorth">A reading of compass data for heading magnetic north.</param>
            <summary>Public constructor.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.CompassData.Equals(System.Object)">
            <param name="obj">Object to compare</param>
            <summary>If equal to another object</summary>
            <returns>If equal</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.CompassData.Equals(Xamarin.Essentials.CompassData)">
            <param name="other">Other AccelerometerData to compare with.</param>
            <summary>Compares the underlying doubles.</summary>
            <returns>True if they are equal, otherwise false.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.CompassData.GetHashCode">
            <summary>Get the hash code for object.</summary>
            <returns>The hash code</returns>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.CompassData.HeadingMagneticNorth">
            <summary>The heading (measured in degrees) relative to magnetic north.</summary>
            <value>The magnetic north heading.</value>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.CompassData.op_Equality(Xamarin.Essentials.CompassData,Xamarin.Essentials.CompassData)">
            <param name="left">Left to compare</param>
            <param name="right">Right to compare</param>
            <summary>Equality operator for equals</summary>
            <returns>If equal</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.CompassData.op_Inequality(Xamarin.Essentials.CompassData,Xamarin.Essentials.CompassData)">
            <param name="left">Left to check</param>
            <param name="right">Right to check</param>
            <summary>Inequality check</summary>
            <returns>If not equal</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.CompassData.ToString">
            <summary>Current string representation of the data.</summary>
            <returns />
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.ConnectionProfile">
            <summary>Describes the type of connection the device is using.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Essentials.ConnectionProfile.Bluetooth">
            <summary>The bluetooth data connection.</summary>
        </member>
        <member name="F:Xamarin.Essentials.ConnectionProfile.Cellular">
            <summary>The mobile/cellular data connection.</summary>
        </member>
        <member name="F:Xamarin.Essentials.ConnectionProfile.Ethernet">
            <summary>The ethernet data connection.</summary>
        </member>
        <member name="F:Xamarin.Essentials.ConnectionProfile.Unknown">
            <summary>Other unknown type of connection.</summary>
        </member>
        <member name="F:Xamarin.Essentials.ConnectionProfile.WiFi">
            <summary>The WiFi data connection.</summary>
        </member>
        <member name="T:Xamarin.Essentials.Connectivity">
            <summary>Connectivity and networking helpers.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.Connectivity.ConnectionProfiles">
            <summary>Gets the active connectivity types for the device.</summary>
            <value>List of all connection profiles.</value>
            <remarks>
                <para>Can throw PermissionException on Android if ACCESS_NETWORK_STATE is not set in manifest.</para>
            </remarks>
        </member>
        <member name="E:Xamarin.Essentials.Connectivity.ConnectivityChanged">
            <summary>
                <para>Event that is triggered when a network access or profile has changed.</para>
            </summary>
            <remarks>
                <para>Can throw PermissionException on Android if ACCESS_NETWORK_STATE is not set in manifest.</para>
            </remarks>
        </member>
        <member name="P:Xamarin.Essentials.Connectivity.NetworkAccess">
            <summary>Gets the current state of network access. Does not guarantee full access to the internet.</summary>
            <value>The current network access state.</value>
            <remarks>
                <para>Can throw PermissionException on Android if ACCESS_NETWORK_STATE is not set in manifest.</para>
            </remarks>
        </member>
        <member name="T:Xamarin.Essentials.ConnectivityChangedEventArgs">
            <summary>The current connectivity information from the change event.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.ConnectivityChangedEventArgs(Xamarin.Essentials.NetworkAccess,System.Collections.Generic.IEnumerable{Xamarin.Essentials.ConnectionProfile})">
            <param name="access">The current access of the network</param>
            <param name="connectionProfiles">The connection profiles of the events changing</param>
            <summary>Public constructor</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.ConnectivityChangedEventArgs.ConnectionProfiles">
            <summary>Gets the active connectivity types for the device.</summary>
            <value>List of all connection profiles.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.ConnectivityChangedEventArgs.NetworkAccess">
            <summary>Gets the current state of network access. Does not guarantee full access to the internet.</summary>
            <value>The current network access state.</value>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.ConnectivityChangedEventArgs.ToString">
            <summary>The string representation of the event.</summary>
            <returns />
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.Contact">
            <summary>This type contains information about a particular contact.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.Contact">
            <summary>Constructs a new instance of <see cref="T:Xamarin.Essentials.Contact" />.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.Contact(System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Xamarin.Essentials.ContactPhone},System.Collections.Generic.IEnumerable{Xamarin.Essentials.ContactEmail},System.String)">
            <param name="id">The identifier of the contact.</param>
            <param name="namePrefix">The prefix of the contact.</param>
            <param name="givenName">The given name or first name of the contact.</param>
            <param name="middleName">The middle name(s) of the contact.</param>
            <param name="familyName">The family name or last name of the contact.</param>
            <param name="nameSuffix">The suffix of the contact.</param>
            <param name="phones">A collection of phone numbers for the contact.</param>
            <param name="email">A collection of email addresses for the contact.</param>
            <param name="displayName">The display name of the contact.</param>
            <summary>Constructs a new instance of <see cref="T:Xamarin.Essentials.Contact" /> using the various parameters.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.Contact.DisplayName">
            <summary>Gets or sets the display name of the contact.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.Contact.Emails">
            <summary>Gets or sets a collection of email addresses of the contact.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.Contact.FamilyName">
            <summary>Gets or sets the family name or last name of the contact.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.Contact.GivenName">
            <summary>Gets or sets the given name or first name of the contact.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.Contact.Id">
            <summary>Gets or sets the identifier of the contact.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.Contact.MiddleName">
            <summary>Gets or sets the middle name(s) of the contact.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.Contact.NamePrefix">
            <summary>Gets or sets the name prefix of the contact.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.Contact.NameSuffix">
            <summary>Gets or sets the name suffix of the contact.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.Contact.Phones">
            <summary>Gets or sets a collection of phone numbers of the contact.</summary>
            <value />
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Contact.ToString">
            <summary>
                <see cref="P:Xamarin.Essentials.Contact.DisplayName" />
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.ContactEmail">
            <summary>This type contains information about a particular email address.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.ContactEmail">
            <summary>Constructs a new instance of <see cref="T:Xamarin.Essentials.ContactEmail" />.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.ContactEmail(System.String)">
            <param name="emailAddress">The email address.</param>
            <summary>Constructs a new instance of <see cref="T:Xamarin.Essentials.ContactEmail" /> using the various parameters.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.ContactEmail.EmailAddress">
            <summary>Gets or sets the email address.</summary>
            <value />
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.ContactEmail.ToString">
            <summary>
                <see cref="P:Xamarin.Essentials.ContactEmail.EmailAddress" />
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.ContactPhone">
            <summary>This type contains information about a particular phone number.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.ContactPhone">
            <summary>Constructs a new instance of <see cref="T:Xamarin.Essentials.ContactPhone" />.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.ContactPhone(System.String)">
            <param name="phoneNumber">The phone number.</param>
            <summary>Constructs a new instance of <see cref="T:Xamarin.Essentials.ContactPhone" /> using the various parameters.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.ContactPhone.PhoneNumber">
            <summary>Gets or sets the phone number.</summary>
            <value />
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.ContactPhone.ToString">
            <summary>
                <see cref="P:Xamarin.Essentials.ContactPhone.PhoneNumber" />
            </summary>
            <returns />
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.Contacts">
            <summary>API class for working with contacts on the device.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Contacts.GetAllAsync(System.Threading.CancellationToken)">
            <param name="cancellationToken">A token for cancelling the operation</param>
            <summary>Gets a collection of all the contacts on the device.</summary>
            <returns>Returns a collection of contacts on the device.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Contacts.PickContactAsync">
            <summary>Starts file picker for selecting a single contact.</summary>
            <returns>Returns a single contact, or null if the user cancelled the operation.</returns>
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.DeviceDisplay">
            <summary>Represents information about the device screen.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.DeviceDisplay.KeepScreenOn">
            <summary>Gets or sets if the screen shold be kept on.</summary>
            <value>If the screen keep on is set.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.DeviceDisplay.MainDisplayInfo">
            <summary>Gets the main screens display info.</summary>
            <value>The main screen display info.</value>
            <remarks />
        </member>
        <member name="E:Xamarin.Essentials.DeviceDisplay.MainDisplayInfoChanged">
            <summary>Event that is triggered when the main display info changes.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.DeviceIdiom">
            <summary>The idiom (form factor) of the device.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.DeviceIdiom.Create(System.String)">
            <param name="deviceIdiom">The idiom name of the device</param>
            <summary>Creates a new device idiom.</summary>
            <returns />
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.DeviceIdiom.Desktop">
            <summary>Gets the desktop idiom.</summary>
            <value />
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.DeviceIdiom.Equals(System.Object)">
            <param name="obj">The object ot compare.</param>
            <summary>Checks the equality of the idiom.</summary>
            <returns>If the values are equal</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.DeviceIdiom.Equals(Xamarin.Essentials.DeviceIdiom)">
            <param name="other">The object ot compare.</param>
            <summary>Checks the equality of the idiom.</summary>
            <returns>If the values are equal</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.DeviceIdiom.GetHashCode">
            <summary>Gets the hash code for the idom.</summary>
            <returns>The hashc ode</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.DeviceIdiom.op_Equality(Xamarin.Essentials.DeviceIdiom,Xamarin.Essentials.DeviceIdiom)">
            <param name="left">The left idiom to compare.</param>
            <param name="right">The right idiom to compare.</param>
            <summary>Checks the equality of the idiom.</summary>
            <returns>If they are equal</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.DeviceIdiom.op_Inequality(Xamarin.Essentials.DeviceIdiom,Xamarin.Essentials.DeviceIdiom)">
            <param name="left">The left idiom to compare.</param>
            <param name="right">The right idiom to compare.</param>
            <summary>Checks the equality of the idiom.</summary>
            <returns>If they are inequal</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.DeviceIdiom.Phone">
            <summary>Gets the phone idiom.</summary>
            <value>The phone idiom</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.DeviceIdiom.Tablet">
            <summary>Gets the tablet idiom.</summary>
            <value>The tablet idiom</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.DeviceIdiom.ToString">
            <summary>String representation of the idiom.</summary>
            <returns>String representation of the idiom.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.DeviceIdiom.TV">
            <summary>Gets the TV idiom.</summary>
            <value>The TV idiom</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.DeviceIdiom.Unknown">
            <summary>Gets the unknown idiom.</summary>
            <value>An unknown idiom.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.DeviceIdiom.Watch">
            <summary>Gets the watch idiom.</summary>
            <value>The watch idiom</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.DeviceInfo">
            <summary>Represents information about the device.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.DeviceInfo.DeviceType">
            <summary>Gets the type of device the application is running on.</summary>
            <value>The device type.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.DeviceInfo.Idiom">
            <summary>Gets the idiom of the device. </summary>
            <value>The idiom.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.DeviceInfo.Manufacturer">
            <summary>Gets the manufacturer of the device.</summary>
            <value>Device manufacturer.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.DeviceInfo.Model">
            <summary>Gets the model of the device.</summary>
            <value>Device model.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.DeviceInfo.Name">
            <summary>Gets the name of the device.</summary>
            <value>The name of the device (often specified by the user).</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.DeviceInfo.Platform">
            <summary>Gets the platform or operating system of the device.</summary>
            <value>The platform of device.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.DeviceInfo.Version">
            <summary>Gets the version of the operating system.</summary>
            <value>The device operating system.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.DeviceInfo.VersionString">
            <summary>Gets the version of the operating system.</summary>
            <value>The version of the operating system.</value>
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.DevicePlatform">
            <summary>The device platform that the application is running on.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.DevicePlatform.Android">
            <summary>Gets the Android platform.</summary>
            <value>The Android platform</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.DevicePlatform.Create(System.String)">
            <param name="devicePlatform">The device platform.</param>
            <summary>Creates a new Device Platform.</summary>
            <returns>The device platform</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.DevicePlatform.Equals(System.Object)">
            <param name="obj">The object compare</param>
            <summary>Checks the equality of the platform.</summary>
            <returns>If they are equal</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.DevicePlatform.Equals(Xamarin.Essentials.DevicePlatform)">
            <param name="other">The platform to compare</param>
            <summary>Checks the equality of the platform.</summary>
            <returns>If they are equal</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.DevicePlatform.GetHashCode">
            <summary>Gets the hash code of the platform.</summary>
            <returns>The hash code of the platform.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.DevicePlatform.iOS">
            <summary>Gets the iOS platform.</summary>
            <value>The iOS Platform</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.DevicePlatform.macOS">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.DevicePlatform.op_Equality(Xamarin.Essentials.DevicePlatform,Xamarin.Essentials.DevicePlatform)">
            <param name="left">The left side to compare.</param>
            <param name="right">The right side to compare</param>
            <summary>Checks the equality of the platform.</summary>
            <returns>If they are equal</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.DevicePlatform.op_Inequality(Xamarin.Essentials.DevicePlatform,Xamarin.Essentials.DevicePlatform)">
            <param name="left">The left side to compare.</param>
            <param name="right">The right side to compare</param>
            <summary>Checks the equality of the platform.</summary>
            <returns>If they are inequal</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.DevicePlatform.Tizen">
            <summary>Gets the Tizen platform</summary>
            <value>The Tizen platform</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.DevicePlatform.ToString">
            <summary>The string representation of the platform.</summary>
            <returns>The string representation of the platform.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.DevicePlatform.tvOS">
            <summary>Gets the tvOS platform</summary>
            <value>The tvOS platform</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.DevicePlatform.Unknown">
            <summary>Gets the unknown platform.</summary>
            <value>An unknown platform</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.DevicePlatform.UWP">
            <summary>Gets the UWP platform.</summary>
            <value>The UWP platform</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.DevicePlatform.watchOS">
            <summary>Gets the watchOS platform</summary>
            <value>The watchOS platform.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.DeviceType">
            <summary>Various types of devices.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Essentials.DeviceType.Physical">
            <summary>The device is a physical device, such as an iPhone, Android tablet or Windows desktop.</summary>
        </member>
        <member name="F:Xamarin.Essentials.DeviceType.Unknown">
            <summary>An unknown device type.</summary>
        </member>
        <member name="F:Xamarin.Essentials.DeviceType.Virtual">
            <summary>The device is virtual, such as the iOS simulators, Android emulators or Windows emulators.</summary>
        </member>
        <member name="T:Xamarin.Essentials.DisplayInfo">
            <summary>Represents information about the screen.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.DisplayInfo(System.Double,System.Double,System.Double,Xamarin.Essentials.DisplayOrientation,Xamarin.Essentials.DisplayRotation)">
            <param name="width">The width of the display</param>
            <param name="height">The height of the display</param>
            <param name="density">The screen density</param>
            <param name="orientation">The current orientation</param>
            <param name="rotation">The rotation of the device.</param>
            <summary>Main constructor for Display Information</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Essentials.DisplayInfo(System.Double,System.Double,System.Double,Xamarin.Essentials.DisplayOrientation,Xamarin.Essentials.DisplayRotation,System.Single)">
            <param name="width">The width of the display</param>
            <param name="height">The height of the display</param>
            <param name="density">The screen density</param>
            <param name="orientation">The current orientation</param>
            <param name="rotation">The rotation of the device.</param>
            <param name="rate">The refresh rate of the display.</param>
            <summary>Main constructor for Display Information</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.DisplayInfo.Density">
            <summary>Gets a value representing the screen density.</summary>
            <value>The screen density.</value>
            <remarks>
                <para>The density is the scaling or a factor that can be used to convert between physical pixels and scaled pixels. For example, on high resolution displays, the physical number of pixels increases, but the scaled pixels remain the same.</para>
                <para>In a practical example for iOS, the Retina display will have a density of 2.0 or 3.0, but the units used to lay out a view does not change much. A view with a UI width of 100 may be 100 physical pixels (density = 1) on a non-Retina device, but be 200 physical pixels (density = 2) on a Retina device.</para>
                <para>On Windows or UWP, the density works similarly, and may often relate to the scale used in the display. On some monitors, the scale is set to 100% (density = 1), but on other high resolution monitors, the scale may be set to 200% (density = 2) or even 250% (density = 2.5).</para>
            </remarks>
        </member>
        <member name="M:Xamarin.Essentials.DisplayInfo.Equals(System.Object)">
            <param name="obj">Object to compare.</param>
            <summary>If equal to another object.</summary>
            <returns>If equal.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.DisplayInfo.Equals(Xamarin.Essentials.DisplayInfo)">
            <param name="other">The other display info to compare.</param>
            <summary>If equal to another object.</summary>
            <returns>If equal.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.DisplayInfo.GetHashCode">
            <summary>Gets the hash code for object.</summary>
            <returns>The hash code.</returns>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.DisplayInfo.Height">
            <summary>Gets the height of the screen for the current orientation.</summary>
            <value>The height in pixels.</value>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.DisplayInfo.op_Equality(Xamarin.Essentials.DisplayInfo,Xamarin.Essentials.DisplayInfo)">
            <param name="left">Left to compare.</param>
            <param name="right">Right to compare.</param>
            <summary>If equal to another object.</summary>
            <returns>If equal</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.DisplayInfo.op_Inequality(Xamarin.Essentials.DisplayInfo,Xamarin.Essentials.DisplayInfo)">
            <param name="left">Left to compare</param>
            <param name="right">Right to compare</param>
            <summary>If not equal to another object.</summary>
            <returns>If not equal</returns>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.DisplayInfo.Orientation">
            <summary>Gets the orientation of the device.</summary>
            <value>The orientation.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.DisplayInfo.RefreshRate">
            <summary>Gets the refresh rate of the display.</summary>
            <value>The refresh rate in Hz.</value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:Xamarin.Essentials.DisplayInfo.Rotation">
            <summary>Gets the rotation from the designated orientation.</summary>
            <value>The rotation</value>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.DisplayInfo.ToString">
            <summary>String representation of information.</summary>
            <returns>String information about display info.</returns>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.DisplayInfo.Width">
            <summary>Gets the width of the scrreen for the current orientation.</summary>
            <value>The width in pixels.</value>
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.DisplayInfoChangedEventArgs">
            <summary>Main display information event arguments.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.DisplayInfoChangedEventArgs(Xamarin.Essentials.DisplayInfo)">
            <param name="displayInfo">The display info for the event</param>
            <summary>Main constructor for event args.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.DisplayInfoChangedEventArgs.DisplayInfo">
            <summary>Gets the current display info for the main display.</summary>
            <value>The current display info.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.DisplayOrientation">
            <summary>Display Orientation</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Essentials.DisplayOrientation.Landscape">
            <summary>Display is in landscape.</summary>
        </member>
        <member name="F:Xamarin.Essentials.DisplayOrientation.Portrait">
            <summary>Display is in portrait.</summary>
        </member>
        <member name="F:Xamarin.Essentials.DisplayOrientation.Unknown">
            <summary>Unknown display orientation.</summary>
        </member>
        <member name="T:Xamarin.Essentials.DisplayRotation">
            <summary>Display rotation.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Essentials.DisplayRotation.Rotation0">
            <summary>Rotated 0 degrees.</summary>
        </member>
        <member name="F:Xamarin.Essentials.DisplayRotation.Rotation180">
            <summary>Rotated 180 degrees.</summary>
        </member>
        <member name="F:Xamarin.Essentials.DisplayRotation.Rotation270">
            <summary>Rotated 270 degrees.</summary>
        </member>
        <member name="F:Xamarin.Essentials.DisplayRotation.Rotation90">
            <summary>Rotated 90 degrees.</summary>
        </member>
        <member name="F:Xamarin.Essentials.DisplayRotation.Unknown">
            <summary>Unknown display rotation.</summary>
        </member>
        <member name="T:Xamarin.Essentials.DistanceUnits">
            <summary>Distance Unit for use in conversion.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Essentials.DistanceUnits.Kilometers">
            <summary>Kilometers</summary>
        </member>
        <member name="F:Xamarin.Essentials.DistanceUnits.Miles">
            <summary>Miles</summary>
        </member>
        <member name="T:Xamarin.Essentials.Email">
            <summary>Provides an easy way to allow the user to send emails.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Email.ComposeAsync">
            <summary>Opens the default email client to allow the user to send the message.</summary>
            <returns />
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Email.ComposeAsync(Xamarin.Essentials.EmailMessage)">
            <param name="message">The email message.</param>
            <summary>Opens the default email client to allow the user to send the message.</summary>
            <returns />
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Email.ComposeAsync(System.String,System.String,System.String[])">
            <param name="subject">The email subject.</param>
            <param name="body">The email body.</param>
            <param name="to">The email recipients.</param>
            <summary>Opens the default email client to allow the user to send the message with the provided subject, body and recipients.</summary>
            <returns />
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.EmailAttachment">
            <summary>Email file attachment.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.EmailAttachment(System.String)">
            <param name="fullPath">Full path and filename to file.</param>
            <summary>Email attachment from filename.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.EmailAttachment(Xamarin.Essentials.FileBase)">
            <param name="file">Existing file.</param>
            <summary>Email attachment from existing file.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.EmailAttachment(System.String,System.String)">
            <param name="fullPath">Full path and filename to file.</param>
            <param name="contentType">Content type (MIME type) of the file (eg: `image/png`).</param>
            <summary>Explicit content type (MIME type) of file.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.EmailBodyFormat">
            <summary>Represents various types of email body formats.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Essentials.EmailBodyFormat.Html">
            <summary>The email message body is HTML (not supported on UWP).</summary>
        </member>
        <member name="F:Xamarin.Essentials.EmailBodyFormat.PlainText">
            <summary>The email message body is plain text.</summary>
        </member>
        <member name="T:Xamarin.Essentials.EmailMessage">
            <summary>Represents a single email message.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.EmailMessage">
            <summary>Creates a new instance of EmailMessage.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.EmailMessage(System.String,System.String,System.String[])">
            <param name="subject">The email subject.</param>
            <param name="body">The email body.</param>
            <param name="to">The email's recipients.</param>
            <summary>Creates a new instance of EmailMessage with the specified subject, body and recipients.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.EmailMessage.Attachments">
            <summary>Gets or sets a list of file attachments.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.EmailMessage.Bcc">
            <summary>Gets or sets the email's BCC recipients.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.EmailMessage.Body">
            <summary>Gets or sets the email's body.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.EmailMessage.BodyFormat">
            <summary>Gets or sets a value indicating whether the message is in plain text or HTML (not supported on UWP).</summary>
            <value />
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.EmailMessage.Cc">
            <summary>Gets or sets the email's CC recipients.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.EmailMessage.Subject">
            <summary>Gets or sets the email's subject.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.EmailMessage.To">
            <summary>Gets or sets the email's recipients.</summary>
            <value />
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.EnergySaverStatus">
            <summary>Status of energy saver on the device.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Essentials.EnergySaverStatus.Off">
            <summary>Energy save is off</summary>
        </member>
        <member name="F:Xamarin.Essentials.EnergySaverStatus.On">
            <summary>Energy saver is on</summary>
        </member>
        <member name="F:Xamarin.Essentials.EnergySaverStatus.Unknown">
            <summary>Status of energy saver is unknown.</summary>
        </member>
        <member name="T:Xamarin.Essentials.EnergySaverStatusChangedEventArgs">
            <summary>Event arguments when the energy saver status changes.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Essentials.EnergySaverStatusChangedEventArgs(Xamarin.Essentials.EnergySaverStatus)">
            <param name="saverStatus">The current status of the event.</param>
            <summary>Public constructor for event arguments</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.EnergySaverStatusChangedEventArgs.EnergySaverStatus">
            <summary>Gets the current status of energy saver mode</summary>
            <value>The current statu of the energy saver mode.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.EnergySaverStatusChangedEventArgs.ToString">
            <summary>A string representation of the event arguments.</summary>
            <returns>A string representation of the event arguments.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.ExperimentalFeatures">
            <summary>Enables experimental features in Xamarin.Essentials</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Essentials.ExperimentalFeatures.EmailAttachments">
            <summary>Obsolete as of version 1.3.0 and no longer required to use the feature. Experimental feature for email attachments.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.ExperimentalFeatures.Enable(System.String[])">
            <param name="featureNames">List of features to enable.</param>
            <summary>Enable experimental features for Xamarin.Essentials.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Essentials.ExperimentalFeatures.MediaPicker">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Essentials.ExperimentalFeatures.OpenFileRequest">
            <summary>Obsolete as of version 1.3.0 and no longer required to use the feature. Experimental feature for requesting a file to be opened.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Essentials.ExperimentalFeatures.ShareFileRequest">
            <summary>Obsolete as of version 1.3.0 and no longer required to use the feature. Experimental feature for share a file with other applications.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.FeatureNotEnabledException">
            <summary>An exception thrown when a feature on the device is not enabled.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Essentials.FeatureNotEnabledException">
            <summary>Public constructor</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Essentials.FeatureNotEnabledException(System.String)">
            <param name="message">Message for the developer to use when debugging.</param>
            <summary>Public constructor</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Essentials.FeatureNotEnabledException(System.String,System.Exception)">
            <param name="message">Message for the developer to use when debugging.</param>
            <param name="innerException">Inner exception related.</param>
            <summary>Public constructor</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.FeatureNotSupportedException">
            <summary>Exception that occurs when an attempt is made to use a feature on a platform that does not support it.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.FeatureNotSupportedException">
            <summary>Creates a new instance of FeatureNotSupportedException.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.FeatureNotSupportedException(System.String)">
            <param name="message">The exception message.</param>
            <summary>Creates a new instance of FeatureNotSupportedException with the specified message.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.FeatureNotSupportedException(System.String,System.Exception)">
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
            <summary>Creates a new instance of FeatureNotSupportedException with the specified message and inner exception.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.FileBase">
            <summary>A representation of a file and its content type.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.FileBase(Xamarin.Essentials.FileBase)">
            <param name="file">An existing FileBase instance to use.</param>
            <summary>FileBase from an existing instance.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.FileBase.ContentType">
            <summary>Gets or sets the file's content type as a MIME type (eg: `image/png`).</summary>
            <value />
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.FileBase.FileName">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.FileBase.FullPath">
            <summary>Gets the full path and filename.</summary>
            <value />
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.FileBase.OpenReadAsync">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.FilePicker">
            <summary>Lets the user pick a file from the device's storage.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.FilePicker.PickAsync(Xamarin.Essentials.PickOptions)">
            <param name="options">File picker options to use; may be null</param>
            <summary>Starts file picker for selecting a single file.</summary>
            <returns>File picking result object, or null when picking was cancelled by the user.</returns>
            <remarks>
          File types can be specified in order to limit files that can be selected, using a
          PickOptions object. Note that this method may re-throw platform specific exceptions that
          occured during file picking. When calling PickAsync() again while showing a file
          picker, the Task object that was returned from the first call is cancelled. Be sure to
          also handle the TaskCanceledException in this case.
        </remarks>
        </member>
        <member name="M:Xamarin.Essentials.FilePicker.PickMultipleAsync(Xamarin.Essentials.PickOptions)">
            <param name="options">File picker options to use; may be null</param>
            <summary>Starts file picker for selecting a single file.</summary>
            <returns>File picking result object, or null when picking was cancelled by the user.</returns>
            <remarks>
          File types can be specified in order to limit files that can be selected, using a
          PickOptions object. Note that this method may re-throw platform specific exceptions that
          occured during file picking. When calling PickMultipleAsync() again while showing a file
          picker, the Task object that was returned from the first call is cancelled. Be sure to
          also handle the TaskCanceledException in this case.
        </remarks>
        </member>
        <member name="T:Xamarin.Essentials.FilePickerFileType">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Essentials.FilePickerFileType">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Essentials.FilePickerFileType(System.Collections.Generic.IDictionary{Xamarin.Essentials.DevicePlatform,System.Collections.Generic.IEnumerable{System.String}})">
            <param name="fileTypes">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.FilePickerFileType.GetPlatformFileType(Xamarin.Essentials.DevicePlatform)">
            <param name="platform">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Essentials.FilePickerFileType.Images">
            <summary>Image file types.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Essentials.FilePickerFileType.Jpeg">
            <summary>JPEG file type (*.jpeg, *.jpg).</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Essentials.FilePickerFileType.Pdf">
            <summary>PDF file type (*.pdf).</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Essentials.FilePickerFileType.Png">
            <summary>PNG file type (*.png).</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.FilePickerFileType.Value">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Essentials.FilePickerFileType.Videos">
            <summary>Video file types.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.FileProvider">
            <summary>Android FileProvider implementation for creating Content URIs to share files with other applications.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.FileProvider">
            <summary>Default constructor.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.FileProvider.TemporaryLocation">
            <summary>Gets or sets the temporary location for file sharing.</summary>
            <value />
            <remarks>The default is to prefer external and fallback to internal.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.FileProviderLocation">
            <summary>Location to save temporary files to for sharing.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Essentials.FileProviderLocation.External">
            <summary>External storage or cache only.</summary>
        </member>
        <member name="F:Xamarin.Essentials.FileProviderLocation.Internal">
            <summary>Internal cache only,</summary>
        </member>
        <member name="F:Xamarin.Essentials.FileProviderLocation.PreferExternal">
            <summary>Prefer external and fall back to internal if unavailable.</summary>
        </member>
        <member name="T:Xamarin.Essentials.FileResult">
            <summary />
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.FileResult(System.String)">
            <param name="fullPath">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Essentials.FileResult(Xamarin.Essentials.FileBase)">
            <param name="file">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Essentials.FileResult(System.String,System.String)">
            <param name="fullPath">To be added.</param>
            <param name="contentType">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.FileSystem">
            <summary>Provides an easy way to access the locations for device folders.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.FileSystem.AppDataDirectory">
            <summary>Gets the location where app data can be stored.</summary>
            <value>The location where app data can be stored.</value>
            <remarks>This location usually is not visible to the user, and is backed up.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.FileSystem.CacheDirectory">
            <summary>Gets the location where temporary data can be stored.</summary>
            <value>The location where temporary data can be stored.</value>
            <remarks>This location usually is not visible to the user, is not backed up, and may be cleared at any time.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.FileSystem.OpenAppPackageFileAsync(System.String)">
            <param name="filename">the name of the file to load from the app package.</param>
            <summary>Opens a stream to a file contained within the app package.</summary>
            <returns>Returns a stream to the file.</returns>
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.Flashlight">
            <summary>Turn the Flashlight / Torch / Lamp On and Off.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Flashlight.TurnOffAsync">
            <summary>Turns the Flashlight Off.</summary>
            <returns />
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Flashlight.TurnOnAsync">
            <summary>Turns the Flashlight On.</summary>
            <returns />
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.Geocoding">
            <summary>Easily convert between geographic coordinated and place names.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Geocoding.GetLocationsAsync(System.String)">
            <param name="address">Address to retrieve the lcoation for.</param>
            <summary>Retrieve location for a given address.</summary>
            <returns>
                <para>List of locations that best match the address or null if none found.</para>
            </returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Geocoding.GetPlacemarksAsync(Xamarin.Essentials.Location)">
            <param name="location">Location to find placemarks for.</param>
            <summary>Retrieve placemarks for a given location.</summary>
            <returns>List of placemarks or null if no placemarks are found.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Geocoding.GetPlacemarksAsync(System.Double,System.Double)">
            <param name="latitude">Latitude of the location.</param>
            <param name="longitude">Longitude of the location.</param>
            <summary>Retrieve location for a given address.</summary>
            <returns>List of placemarks or null if no placemarks are found.</returns>
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.Geolocation">
            <summary>Provides a way to get the current location of the device.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Geolocation.GetLastKnownLocationAsync">
            <summary>Returns the last known location of the device.</summary>
            <returns>Returns the location.</returns>
            <remarks>This location may be a recently cached location.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Geolocation.GetLocationAsync">
            <summary>Returns the current location of the device.</summary>
            <returns>Returns the location.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Geolocation.GetLocationAsync(Xamarin.Essentials.GeolocationRequest)">
            <param name="request">The criteria to use when determining the location of the device.</param>
            <summary>Returns the current location of the device using the specified criteria.</summary>
            <returns>Returns the location.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Geolocation.GetLocationAsync(Xamarin.Essentials.GeolocationRequest,System.Threading.CancellationToken)">
            <param name="request">The criteria to use when determining the location of the device.</param>
            <param name="cancelToken">A token for cancelling the operation.</param>
            <summary>Returns the current location of the device using the specified criteria.</summary>
            <returns>Returns the location.</returns>
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.GeolocationAccuracy">
            <summary>Represents levels of accuracy when determining location.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Essentials.GeolocationAccuracy.Best">
            <summary>Represents the best accuracy, using the most power to obtain and typically within 10 meters.</summary>
        </member>
        <member name="F:Xamarin.Essentials.GeolocationAccuracy.Default">
            <summary>Represents default accuracy (Medium), typically within 30-500 meters.</summary>
        </member>
        <member name="F:Xamarin.Essentials.GeolocationAccuracy.High">
            <summary>Represents high accuracy, typically within 10-100 meters.</summary>
        </member>
        <member name="F:Xamarin.Essentials.GeolocationAccuracy.Low">
            <summary>Represents low accuracy, typically within 300-3000 meters.</summary>
        </member>
        <member name="F:Xamarin.Essentials.GeolocationAccuracy.Lowest">
            <summary>Represents the lowest accuracy, using the least power to obtain and typically within 1000-5000 meters.</summary>
        </member>
        <member name="F:Xamarin.Essentials.GeolocationAccuracy.Medium">
            <summary>Represents medium accuracy, typically within 30-500 meters.</summary>
        </member>
        <member name="T:Xamarin.Essentials.GeolocationRequest">
            <summary>Represents the criteria for a location request.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.GeolocationRequest">
            <summary>Creates a new instance of GeolocationRequest.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.GeolocationRequest(Xamarin.Essentials.GeolocationAccuracy)">
            <param name="accuracy">The desired accuracy.</param>
            <summary>Creates a new instance of GeolocationRequest with the specified accuracy.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.GeolocationRequest(Xamarin.Essentials.GeolocationAccuracy,System.TimeSpan)">
            <param name="accuracy">The desired accuracy.</param>
            <param name="timeout">The request timeout.</param>
            <summary>Creates a new instance of GeolocationRequest with the specified accuracy and timeout.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.GeolocationRequest.DesiredAccuracy">
            <summary>Gets or sets the desired accuracy of the resulting location.</summary>
            <value>The desired accuracy of the location.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.GeolocationRequest.Timeout">
            <summary>Gets or sets the location request timeout.</summary>
            <value>The location request timeout.</value>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.GeolocationRequest.ToString">
            <summary>A string representation of the request.</summary>
            <returns>A string representation of the request.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.Gyroscope">
            <summary>Gyroscope data of the rotation around the device's three primary axis.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.Gyroscope.IsMonitoring">
            <summary>Gets if gyro is being monitored.</summary>
            <value>If monitoring.</value>
            <remarks />
        </member>
        <member name="E:Xamarin.Essentials.Gyroscope.ReadingChanged">
            <summary>Event triggered when reading of sensor changes.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Gyroscope.Start(Xamarin.Essentials.SensorSpeed)">
            <param name="sensorSpeed">Speed to monitor sensor.</param>
            <summary>Start monitoring for changes to gyro.</summary>
            <remarks>Will throw FeatureNotSupportedException if not supported on device. Will throw ArgumentNullException if handler is null.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Gyroscope.Stop">
            <summary>Stop monitoring for changes to gyro.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.GyroscopeChangedEventArgs">
            <summary>Event arguments containing the current reading.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.GyroscopeChangedEventArgs(Xamarin.Essentials.GyroscopeData)">
            <param name="reading">The current reading of the gyroscope</param>
            <summary>public constructor</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.GyroscopeChangedEventArgs.Reading">
            <summary>Gets the reading of the gyro.</summary>
            <value>The reading.</value>
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.GyroscopeData">
            <summary>Gyroscope information.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.GyroscopeData(System.Double,System.Double,System.Double)">
            <param name="x">X data</param>
            <param name="y">Y data</param>
            <param name="z">Z data</param>
            <summary>Public constructor</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Essentials.GyroscopeData(System.Single,System.Single,System.Single)">
            <param name="x">X data</param>
            <param name="y">Y data</param>
            <param name="z">Z data</param>
            <summary>Public constructor.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.GyroscopeData.AngularVelocity">
            <summary>Gets the angular velocity vector in radians per second.</summary>
            <value />
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.GyroscopeData.Equals(System.Object)">
            <param name="obj">Object to compare</param>
            <summary>If equal to another object</summary>
            <returns>If equal</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.GyroscopeData.Equals(Xamarin.Essentials.GyroscopeData)">
            <param name="other">Other GyroscopeData to compare with.</param>
            <summary>Compares the underlying Vector3 instances.</summary>
            <returns>True if they match, otherwise false.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.GyroscopeData.GetHashCode">
            <summary>Get the hash code for object.</summary>
            <returns>The hash code</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.GyroscopeData.op_Equality(Xamarin.Essentials.GyroscopeData,Xamarin.Essentials.GyroscopeData)">
            <param name="left">Left to compare</param>
            <param name="right">Right to compare</param>
            <summary>Equality operator for equals</summary>
            <returns>If equal</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.GyroscopeData.op_Inequality(Xamarin.Essentials.GyroscopeData,Xamarin.Essentials.GyroscopeData)">
            <param name="left">Left to check</param>
            <param name="right">Right to check</param>
            <summary>Inequality check</summary>
            <returns>If not equal</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.GyroscopeData.ToString">
            <summary>A string representation of the data.</summary>
            <returns>A string representation of the data.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.HapticFeedback">
            <summary>Provides methods to control HapticFeedback responses</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.HapticFeedback.Perform(Xamarin.Essentials.HapticFeedbackType)">
            <param name="type">The type of a HapticFeedback response that will be called</param>
            <summary>Calls the platform-oriented method to cause a HapticFeedback response of the specified type</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.HapticFeedbackType">
            <summary>Enumerates the possible types of HapticFeedback response</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Essentials.HapticFeedbackType.Click">
            <summary>Click</summary>
        </member>
        <member name="F:Xamarin.Essentials.HapticFeedbackType.LongPress">
            <summary>LongPress</summary>
        </member>
        <member name="T:Xamarin.Essentials.Launcher">
            <summary>Launches an application specified by the passed uri.</summary>
            <remarks>Has to be a valid System.Uri</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Launcher.CanOpenAsync(System.String)">
            <param name="uri">string uri scheme</param>
            <summary>Queries if device supports opening the uri scheme</summary>
            <returns>True if opening is supported, otherwise false</returns>
            <remarks>May throw System.UriFormatException if uri is malformed</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Launcher.CanOpenAsync(System.Uri)">
            <param name="uri">uri scheme</param>
            <summary>Queries if device supports opening the uri scheme</summary>
            <returns>True if opening is supported, otherwise false</returns>
            <remarks>May throw System.UriFormatException if uri is malformed</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Launcher.OpenAsync(System.String)">
            <param name="uri">string uri scheme</param>
            <summary>Launches the app specified by the uri scheme</summary>
            <returns />
            <remarks>May throw System.UriFormatException if uri is malformed. Verify if the uri scheme is supported before calling this method</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Launcher.OpenAsync(System.Uri)">
            <param name="uri">uri scheme</param>
            <summary>Launches the app specified by the uri scheme</summary>
            <returns />
            <remarks>May throw System.UriFormatException if uri is malformed. Verify if the uri scheme is supported before calling this method</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Launcher.OpenAsync(Xamarin.Essentials.OpenFileRequest)">
            <param name="request">Request that contains information on the file to open.</param>
            <summary>Requests to open a file in an application based on content type.</summary>
            <returns />
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Launcher.TryOpenAsync(System.String)">
            <param name="uri">string uri scheme</param>
            <summary>
                <para>Launches the app specified by the uri scheme and returns if it was supported or not</para>
            </summary>
            <returns>True if opening is supported, otherwise false</returns>
            <remarks>May throw System.UriFormatException if uri is malformed</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Launcher.TryOpenAsync(System.Uri)">
            <param name="uri">uri scheme</param>
            <summary>
                <para>Launches the app specified by the uri scheme and returns if it was supported or not</para>
            </summary>
            <returns>True if opening is supported, otherwise false</returns>
            <remarks>May throw System.UriFormatException if uri is malformed</remarks>
        </member>
        <member name="T:Xamarin.Essentials.Locale">
            <summary>Represents a specific geographical, political, or cultural region.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.Locale.Country">
            <summary>Country name or code.</summary>
            <value />
            <remarks>This value may vary between platforms.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.Locale.Id">
            <summary>Unique Id of the Locale.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.Locale.Language">
            <summary>Language name or code.</summary>
            <value />
            <remarks>This value may vary between platforms.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.Locale.Name">
            <summary>Display name of the Locale.</summary>
            <value />
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.Location">
            <summary>The latitude, longitude, altitude and time information reported by the device.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.Location">
            <summary>Default constructor.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.Location(Xamarin.Essentials.Location)">
            <param name="point">Location to copy values from.</param>
            <summary>Copy constructor.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.Location(System.Double,System.Double)">
            <param name="latitude">Default latitude for location.</param>
            <param name="longitude">Default longitude for location.</param>
            <summary>Parametrized constructor with latitude and longitude parameters.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.Location(System.Double,System.Double,System.DateTimeOffset)">
            <param name="latitude">Default latitude for location.</param>
            <param name="longitude">Default longitude for location.</param>
            <param name="timestamp">Timestamp for the location (Utc based).</param>
            <summary>Parametrized constructor with latitude, longitude and timestamp parameters.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.Location(System.Double,System.Double,System.Double)">
            <param name="latitude">Default latitude for location.</param>
            <param name="longitude">Default longitude for location.</param>
            <param name="altitude">To be added.</param>
            <summary>Parametrized constructor with latitude, longitude and altitude parameters.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.Location.Accuracy">
            <summary>Gets or sets the horizontal accuracy (in meters) of the location.</summary>
            <value>The horizontal accuracy of the location.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.Location.Altitude">
            <summary>Gets the altitude in meters (if available) in a reference system which is specified by AltitudeReferenceSystem.</summary>
            <value>Altitude of location if available.</value>
            <remarks>Returns 0 or no value if not available.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.Location.AltitudeReferenceSystem">
            <summary>Specifies the reference system in which the altitude value is given.</summary>
            <value>The altitude reference system.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Location.CalculateDistance(Xamarin.Essentials.Location,Xamarin.Essentials.Location,Xamarin.Essentials.DistanceUnits)">
            <param name="locationStart">Start location to calculate from.</param>
            <param name="locationEnd">End location to calculate from.</param>
            <param name="units">Units to return.</param>
            <summary>Calculate distance between two locations.</summary>
            <returns>Distance between two locations in the unit selected.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Location.CalculateDistance(System.Double,System.Double,Xamarin.Essentials.Location,Xamarin.Essentials.DistanceUnits)">
            <param name="latitudeStart">Start latitude to calculate from.</param>
            <param name="longitudeStart">Start longitude to calculate from.</param>
            <param name="locationEnd">End location to calculate from.</param>
            <param name="units">Unit to return.</param>
            <summary>Calculate distance between two locations.</summary>
            <returns>Distance calculated.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Location.CalculateDistance(Xamarin.Essentials.Location,System.Double,System.Double,Xamarin.Essentials.DistanceUnits)">
            <param name="locationStart">Start location to calculate from.</param>
            <param name="latitudeEnd">End latitude to calculate from.</param>
            <param name="longitudeEnd">End longitude to calculate from.</param>
            <param name="units">Unit to use.</param>
            <summary>Calculate distance between two locations.</summary>
            <returns>Distance calculated.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Location.CalculateDistance(System.Double,System.Double,System.Double,System.Double,Xamarin.Essentials.DistanceUnits)">
            <param name="latitudeStart">Start latitude to calculate from.</param>
            <param name="longitudeStart">Start longitude to calculate from.</param>
            <param name="latitudeEnd">End latitude to calculate from.</param>
            <param name="longitudeEnd">End longitude to calculate from.</param>
            <param name="units">Units to return.</param>
            <summary>Calculate distance between two locations.</summary>
            <returns>Distance between two locations in the unit selected.</returns>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.Location.Course">
            <summary>Degrees relative to true north.</summary>
            <value>0..360 in degrees relative to true north. null if unavailable.</value>
            <remarks>
                <para>
          Requires a high accuracy query of location and may not be returned by Geolocation.GetLastKnownLocationAsync 
          </para>
            </remarks>
        </member>
        <member name="P:Xamarin.Essentials.Location.IsFromMockProvider">
            <summary>Inform if location is from GPS or from Mock.</summary>
            <value>True if is from Mock and False if from GPS.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.Location.Latitude">
            <summary>Gets or sets the latitude of location.</summary>
            <value>Latitude of the location.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.Location.Longitude">
            <summary>Gets or sets the longitude of location.</summary>
            <value>Longitude of the location.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.Location.Speed">
            <summary>Speed in meters per second.</summary>
            <value>Speed measured by the device..</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.Location.Timestamp">
            <summary>Gets or sets the timestamp of the location.</summary>
            <value>UTC timestamp.</value>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Location.ToString">
            <summary>A string representation of the location.</summary>
            <returns>A string representation of the location.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.Location.VerticalAccuracy">
            <summary>Gets or sets the vertical accuracy (in meters) of the location.</summary>
            <value>The vertical accuracy of the location.</value>
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.LocationExtensions">
            <summary>Location Extensions</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.LocationExtensions.CalculateDistance(Xamarin.Essentials.Location,Xamarin.Essentials.Location,Xamarin.Essentials.DistanceUnits)">
            <param name="locationStart">Start location to calculate from.</param>
            <param name="locationEnd">End location to calculate from.</param>
            <param name="units">Units to use during calculation.</param>
            <summary>Extension to calculate distance from location to another location.</summary>
            <returns>Distance in units fro two locations.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.LocationExtensions.CalculateDistance(Xamarin.Essentials.Location,System.Double,System.Double,Xamarin.Essentials.DistanceUnits)">
            <param name="locationStart">Start location to calculate from.</param>
            <param name="latitudeEnd">End latitude to calculate from.</param>
            <param name="longitudeEnd">End longitude to calculate from.</param>
            <param name="units">Units to use.</param>
            <summary>Extension to calculate distance from location to another location.</summary>
            <returns>Distance calculated.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.LocationExtensions.OpenMapsAsync(Xamarin.Essentials.Location)">
            <param name="location">Location to open to.</param>
            <summary>Open maps to this location.</summary>
            <returns>Task to wait.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.LocationExtensions.OpenMapsAsync(Xamarin.Essentials.Location,Xamarin.Essentials.MapLaunchOptions)">
            <param name="location">Location to open to.</param>
            <param name="options">Options to use.</param>
            <summary>Open maps to this location.</summary>
            <returns>Task to wait.</returns>
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.Magnetometer">
            <summary>Detect device's orentation relative to Earth's magnetic field in microteslas (µ).</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.Magnetometer.IsMonitoring">
            <summary>Gets if magnetometer is being monitored.</summary>
            <value>If monitoring.</value>
            <remarks />
        </member>
        <member name="E:Xamarin.Essentials.Magnetometer.ReadingChanged">
            <summary>Event triggered when reading of sensor changes.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Magnetometer.Start(Xamarin.Essentials.SensorSpeed)">
            <param name="sensorSpeed">Speed to get sensor information.</param>
            <summary>Start monitoring for changes to magnetometer.</summary>
            <remarks>Will throw FeatureNotSupportedException if not supported on device. Will throw ArgumentNullException if handler is null.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Magnetometer.Stop">
            <summary>Stop monitoring for changes to magnetometer.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.MagnetometerChangedEventArgs">
            <summary>Event arguments containing the current reading.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.MagnetometerChangedEventArgs(Xamarin.Essentials.MagnetometerData)">
            <param name="reading">Current reading of data</param>
            <summary>Public constructor</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.MagnetometerChangedEventArgs.Reading">
            <summary>Gets the reading of the magnetometer.</summary>
            <value>The reading.</value>
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.MagnetometerData">
            <summary>Data for magnetometer changes.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.MagnetometerData(System.Double,System.Double,System.Double)">
            <param name="x">X data</param>
            <param name="y">Y data</param>
            <param name="z">Z data</param>
            <summary>Public constructor</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Essentials.MagnetometerData(System.Single,System.Single,System.Single)">
            <param name="x">X data</param>
            <param name="y">Y data</param>
            <param name="z">Z data</param>
            <summary>Public constructor</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.MagnetometerData.Equals(System.Object)">
            <param name="obj">Object to compare</param>
            <summary>If equal to another object</summary>
            <returns>If equal</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.MagnetometerData.Equals(Xamarin.Essentials.MagnetometerData)">
            <param name="other">Other MagnetometerData to compare with.</param>
            <summary>Compares the underlying Vector3 instances.</summary>
            <returns>True if they match, otherwise false.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.MagnetometerData.GetHashCode">
            <summary>Get the hash code for object.</summary>
            <returns>The hash code</returns>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.MagnetometerData.MagneticField">
            <summary>Gets the magnetic field vector in microteslas (µ).</summary>
            <value />
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.MagnetometerData.op_Equality(Xamarin.Essentials.MagnetometerData,Xamarin.Essentials.MagnetometerData)">
            <param name="left">Left to compare</param>
            <param name="right">Right to compare</param>
            <summary>Equality operator for equals</summary>
            <returns>If equal</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.MagnetometerData.op_Inequality(Xamarin.Essentials.MagnetometerData,Xamarin.Essentials.MagnetometerData)">
            <param name="left">Left to check</param>
            <param name="right">Right to check</param>
            <summary>Inequality check</summary>
            <returns>If not equal</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.MagnetometerData.ToString">
            <summary>A string representation of the data.</summary>
            <returns>A string representation of the data.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.MainThread">
            <summary>Main Thread helpers.</summary>
            <remarks>Main Thread helpers.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.MainThread.BeginInvokeOnMainThread(System.Action)">
            <param name="action">Action to execute.</param>
            <summary>Invokes an action on the main thread of the application.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.MainThread.GetMainThreadSynchronizationContextAsync">
            <summary>Gets the main thread synchonization context</summary>
            <returns>The syncrhonization context for the main thread</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.MainThread.InvokeOnMainThreadAsync(System.Action)">
            <param name="action">Action to invoke</param>
            <summary>Invoke the main thread aysnc</summary>
            <returns>A task that can be awaited</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.MainThread.InvokeOnMainThreadAsync(System.Func{System.Threading.Tasks.Task})">
            <param name="funcTask">A function task to execute</param>
            <summary>Invoke the main thread aysnc</summary>
            <returns>A task that can be awaited</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.MainThread.InvokeOnMainThreadAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <typeparam name="T">To be added.</typeparam>
            <param name="funcTask">A function task to execute</param>
            <summary>Invoke the main thread aysnc</summary>
            <returns>A task that can be awaited</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.MainThread.InvokeOnMainThreadAsync``1(System.Func{``0})">
            <typeparam name="T">To be added.</typeparam>
            <param name="func">A function to execute</param>
            <summary>Invoke the main thread aysnc</summary>
            <returns>A task that can be awaited</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.MainThread.IsMainThread">
            <summary>Gets if it is the current main UI thread.</summary>
            <value>If main thread.</value>
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.Map">
            <summary>Map helpers to open a route to specified places via default platforms maps implementation.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Map.OpenAsync(Xamarin.Essentials.Location)">
            <param name="location">Location to open on maps.</param>
            <summary>Open the installed application to a specific location.</summary>
            <returns>Task to be completed.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Map.OpenAsync(Xamarin.Essentials.Placemark)">
            <param name="placemark">Placemark to open on maps.</param>
            <summary>Open the installed application to a specific placemark.</summary>
            <returns>Task to be completed.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Map.OpenAsync(System.Double,System.Double)">
            <param name="latitude">Latitude to open to.</param>
            <param name="longitude">Longitude to open to.</param>
            <summary>Open the installed application to a specific location.</summary>
            <returns>Task to be completed.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Map.OpenAsync(Xamarin.Essentials.Location,Xamarin.Essentials.MapLaunchOptions)">
            <param name="location">Location to open maps to.</param>
            <param name="options">Launch options to use.</param>
            <summary>Open the installed application to a specific location with launch options.</summary>
            <returns>Task to be completed.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Map.OpenAsync(Xamarin.Essentials.Placemark,Xamarin.Essentials.MapLaunchOptions)">
            <param name="placemark">Placemark to open maps to.</param>
            <param name="options">Launch options to use.</param>
            <summary>Open the installed application to a specific placemark with launch options.</summary>
            <returns>Task to be completed.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Map.OpenAsync(System.Double,System.Double,Xamarin.Essentials.MapLaunchOptions)">
            <param name="latitude">Latitude to open to.</param>
            <param name="longitude">Longitude to open to.</param>
            <param name="options">Launch options to use.</param>
            <summary>Open the installed application to a specific location.</summary>
            <returns>Task to be completed.</returns>
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.MapLaunchOptions">
            <summary>Launch options for opening a map.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Essentials.MapLaunchOptions">
            <summary>Public constructor</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.MapLaunchOptions.Name">
            <summary>Name of destination to display to user.</summary>
            <value>Gets the name.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.MapLaunchOptions.NavigationMode">
            <summary>The navigation mode to use.</summary>
            <value>Gets the navigation mode.</value>
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.MediaPicker">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.MediaPicker.CapturePhotoAsync(Xamarin.Essentials.MediaPickerOptions)">
            <param name="options">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.MediaPicker.CaptureVideoAsync(Xamarin.Essentials.MediaPickerOptions)">
            <param name="options">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.MediaPicker.IsCaptureSupported">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.MediaPicker.PickPhotoAsync(Xamarin.Essentials.MediaPickerOptions)">
            <param name="options">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.MediaPicker.PickVideoAsync(Xamarin.Essentials.MediaPickerOptions)">
            <param name="options">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.MediaPickerOptions">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Essentials.MediaPickerOptions">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.MediaPickerOptions.Title">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.NavigationMode">
            <summary>Represents various modes of navigation.</summary>
            <remarks>
                <para>Default is none.</para>
            </remarks>
        </member>
        <member name="F:Xamarin.Essentials.NavigationMode.Bicycling">
            <summary>Bicycle route mode.</summary>
        </member>
        <member name="F:Xamarin.Essentials.NavigationMode.Default">
            <summary>The default navigation mode on the platform.</summary>
        </member>
        <member name="F:Xamarin.Essentials.NavigationMode.Driving">
            <summary>Car route mode.</summary>
        </member>
        <member name="F:Xamarin.Essentials.NavigationMode.None">
            <summary>No navigation mode for map.</summary>
        </member>
        <member name="F:Xamarin.Essentials.NavigationMode.Transit">
            <summary>Transit route mode.</summary>
        </member>
        <member name="F:Xamarin.Essentials.NavigationMode.Walking">
            <summary>Walking route mode.</summary>
        </member>
        <member name="T:Xamarin.Essentials.NetworkAccess">
            <summary>Various states of the connection to the internet.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Essentials.NetworkAccess.ConstrainedInternet">
            <summary>Limited internet access.</summary>
        </member>
        <member name="F:Xamarin.Essentials.NetworkAccess.Internet">
            <summary>Local and Internet access.</summary>
        </member>
        <member name="F:Xamarin.Essentials.NetworkAccess.Local">
            <summary>Local network access only.</summary>
        </member>
        <member name="F:Xamarin.Essentials.NetworkAccess.None">
            <summary>No connectivity.</summary>
        </member>
        <member name="F:Xamarin.Essentials.NetworkAccess.Unknown">
            <summary>The state of the connectivity is not known.</summary>
        </member>
        <member name="T:Xamarin.Essentials.NotImplementedInReferenceAssemblyException">
            <summary>Exception that occurs when executed from a reference assembly. This usually means that the NuGet was not installed into the app project.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.NotImplementedInReferenceAssemblyException">
            <summary>Default constructor.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.OpenFileRequest">
            <summary>Standard request for opening a file to another application.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.OpenFileRequest">
            <summary>Open request with an existing file.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.OpenFileRequest(System.String,Xamarin.Essentials.FileBase)">
            <param name="title">Title to display on open dialog if available.</param>
            <param name="file">File to open.</param>
            <summary>Open request with an existing file.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.OpenFileRequest(System.String,Xamarin.Essentials.ReadOnlyFile)">
            <param name="title">Title to display on open dialog if available.</param>
            <param name="file">File to open.</param>
            <summary>Open request with an existing file.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.OpenFileRequest.File">
            <summary>File to open.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.OpenFileRequest.PresentationSourceBounds">
            <summary>Gets or sets the source rectangle to display the Share UI from.</summary>
            <value />
            <remarks>This is only used on iOS currently.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.OpenFileRequest.Title">
            <summary>Title to display on open dialog if available.</summary>
            <value />
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.OrientationSensor">
            <summary>Device orientation (quaternion) relative to magnetic fields.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.OrientationSensor.IsMonitoring">
            <summary>Gets of currently monitoring the sensor.</summary>
            <value>If monitoring.</value>
            <remarks />
        </member>
        <member name="E:Xamarin.Essentials.OrientationSensor.ReadingChanged">
            <summary>
                <para>Event triggered when reading of sensor changes.</para>
            </summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.OrientationSensor.Start(Xamarin.Essentials.SensorSpeed)">
            <param name="sensorSpeed">Sensor speed to use.</param>
            <summary>Starts monitoring orientation sensor with specific speed.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.OrientationSensor.Stop">
            <summary>Stops monitoring.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.OrientationSensorChangedEventArgs">
            <summary>Orientation event args when reading changes.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.OrientationSensorChangedEventArgs(Xamarin.Essentials.OrientationSensorData)">
            <param name="reading">Reading of the sensor data</param>
            <summary>Public constructor</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.OrientationSensorChangedEventArgs.Reading">
            <summary>Gets the reading when it changes.</summary>
            <value>The current Reading</value>
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.OrientationSensorData">
            <summary>Sensor data for orientation.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.OrientationSensorData(System.Double,System.Double,System.Double,System.Double)">
            <param name="x">X data</param>
            <param name="y">Y data</param>
            <param name="z">Z data</param>
            <param name="w">W data</param>
            <summary>Public constructor</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Essentials.OrientationSensorData(System.Single,System.Single,System.Single,System.Single)">
            <param name="x">X data</param>
            <param name="y">Y data</param>
            <param name="z">Z data</param>
            <param name="w">W data</param>
            <summary>Public constructor</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.OrientationSensorData.Equals(System.Object)">
            <param name="obj">Object to compare</param>
            <summary>If equal to another object</summary>
            <returns>If equal</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.OrientationSensorData.Equals(Xamarin.Essentials.OrientationSensorData)">
            <param name="other">Other OrientationSensorData to compare with.</param>
            <summary>Compares the underlying Quaternion instances.</summary>
            <returns>True if they match, otherwise false.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.OrientationSensorData.GetHashCode">
            <summary>Get the hash code for object.</summary>
            <returns>The hash code</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.OrientationSensorData.op_Equality(Xamarin.Essentials.OrientationSensorData,Xamarin.Essentials.OrientationSensorData)">
            <param name="left">Left to compare</param>
            <param name="right">Right to compare</param>
            <summary>Equality operator for equals</summary>
            <returns>If equal</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.OrientationSensorData.op_Inequality(Xamarin.Essentials.OrientationSensorData,Xamarin.Essentials.OrientationSensorData)">
            <param name="left">Left to check</param>
            <param name="right">Right to check</param>
            <summary>Inequality check</summary>
            <returns>If not equal</returns>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.OrientationSensorData.Orientation">
            <summary>Gets the current orientation that represents a Quaternion.</summary>
            <value>Gets the current orientation</value>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.OrientationSensorData.ToString">
            <summary>A string representation of the data.</summary>
            <returns>A string representation of the data.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.PermissionException">
            <summary>Exception that occures when calling an API that requires a specific permission.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.PermissionException(System.String)">
            <param name="message">Permission that is required.</param>
            <summary>Constructor with permission information.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.Permissions">
            <summary>Access to checking and requesting application permissions.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Permissions.CheckStatusAsync``1">
            <typeparam name="TPermission">The permission to check.</typeparam>
            <summary>Checks the status of a specific permission.</summary>
            <returns>The current status of the permission.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Permissions.IsCapabilityDeclared(System.String)">
            <param name="capabilityName">Name of the capability on UWP.</param>
            <summary>Checks if a specific capability name is declared.</summary>
            <returns>If the capability is declared.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Permissions.IsDeclaredInManifest(System.String)">
            <param name="permission">The name of the specific permission in the manifest to check.</param>
            <summary>Checks if a permission is declared in the Android manifest file.</summary>
            <returns>If the permission is declared or not.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Permissions.IsKeyDeclaredInInfoPlist(System.String)">
            <param name="usageKey">The usage key to check in the info.plist.</param>
            <summary>Check if a usage key is specified in the info.plist file.</summary>
            <returns>If it is declared in the info.plist.</returns>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.Permissions.LocationTimeout">
            <summary>Gets or sets the location timeout for iOS when switching between when in use and always.</summary>
            <value>The specific TimeSpan to use in this time.</value>
            <remarks>This is a special use case where the user is promoted for location permission which was already granted. iOS does not return a value and a timeout must be actived. The default is 10 seconds.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Permissions.RequestAsync``1">
            <typeparam name="TPermission">The permission to request.</typeparam>
            <summary>Request a specific permission from the user.</summary>
            <returns>The status of the permission that was requested.</returns>
            <remarks>The request will be prompted to the user if it hasn't been granted. iOS only allows the permission to be requested once, any additional requests will return immediatelly.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Permissions.ShouldShowRationale``1">
            <typeparam name="TPermission">The type of permission.</typeparam>
            <summary>Gets whether you should show UI with rationale for requesting a permission.</summary>
            <returns>Returns true if rationale should be displayed, otherwise false.</returns>
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.Permissions+BasePermission">
            <summary>Base permission, used internally.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Essentials.Permissions+BasePermission">
            <summary>public constructor for the base permission.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Permissions+BasePermission.CheckStatusAsync">
            <summary>
                <para>Checks the status of a specific permission.</para>
            </summary>
            <returns>The current status of the permission.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Permissions+BasePermission.EnsureDeclared">
            <summary>Ensures that all permissions are decalred.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Permissions+BasePermission.RequestAsync">
            <summary>
                <para>Request a specific permission from the user.</para>
            </summary>
            <returns>The status of the permission that was requested.</returns>
            <remarks>The request will be prompted to the user if it hasn't been granted. iOS only allows the permission to be requested once, any additional requests will return immediatelly.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Permissions+BasePermission.ShouldShowRationale">
            <summary>Gets whether you should show UI with rationale for requesting a permission.</summary>
            <returns>A boolean if the user has declined the permission in the past and UI should be shown.</returns>
            <remarks>Only relevant on Android after a user had denied a permission one time.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.Permissions+BasePlatformPermission">
            <summary>Base platform permission, used internally.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Essentials.Permissions+BasePlatformPermission">
            <summary>Public constructor for base platform permission.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Permissions+BasePlatformPermission.CheckStatusAsync">
            <summary>Checks the status of a specific permission.</summary>
            <returns>The current status of the permission.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Permissions+BasePlatformPermission.EnsureDeclared">
            <summary>Ensures that all permissions are declared.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.Permissions+BasePlatformPermission.RecommendedInfoPlistKeys">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Permissions+BasePlatformPermission.RequestAsync">
            <summary>Request a specific permission from the user.</summary>
            <returns>The status of the permission that was requested.</returns>
            <remarks>The request will be prompted to the user if it hasn't been granted. iOS only allows the permission to be requested once, any additional requests will return immediatelly.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.Permissions+BasePlatformPermission.RequiredDeclarations">
            <summary>Get a list of required declarations.</summary>
            <value>List of required declarations.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.Permissions+BasePlatformPermission.RequiredInfoPlistKeys">
            <summary>Get a list of required keys in the info.plist.</summary>
            <value>List of required keys in the info.plist.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.Permissions+BasePlatformPermission.RequiredPermissions">
            <summary>Get a list of required permissions.</summary>
            <value>List of required permissions.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Permissions+BasePlatformPermission.ShouldShowRationale">
            <summary>Gets whether you should show UI with rationale for requesting a permission.</summary>
            <returns>A boolean if the user has declined the permission in the past and UI should be shown.</returns>
            <remarks>Only relevant on Android after a user had denied a permission one time.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.Permissions+Battery">
            <summary>Permission for battery</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Essentials.Permissions+Battery">
            <summary>Public constructor for permission.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Permissions+Battery.CheckStatusAsync">
            <summary>Check status of Battery permission.</summary>
            <returns>Task of PermissionStatus for Battery.</returns>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.Permissions+Battery.RequiredPermissions">
            <summary>Get a list of required permissions.</summary>
            <value>List of required permissions.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.Permissions+CalendarRead">
            <summary>Permission to read the calendar</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Essentials.Permissions+CalendarRead">
            <summary>Public constructor for permission.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Permissions+CalendarRead.CheckStatusAsync">
            <summary>Checks the status of a specific permission.</summary>
            <returns>The current status of the permission.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Permissions+CalendarRead.RequestAsync">
            <summary>Request a specific permission from the user.</summary>
            <returns>The status of the permission that was requested.</returns>
            <remarks>The request will be prompted to the user if it hasn't been granted. iOS only allows the permission to be requested once, any additional requests will return immediatelly.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.Permissions+CalendarRead.RequiredDeclarations">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.Permissions+CalendarRead.RequiredInfoPlistKeys">
            <summary>Get a list of required keys in the info.plist.</summary>
            <value>List of required keys in the info.plist.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.Permissions+CalendarRead.RequiredPermissions">
            <summary>Get a list of required permissions.</summary>
            <value>List of required permissions.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.Permissions+CalendarWrite">
            <summary>Permission to write to the calendar.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Essentials.Permissions+CalendarWrite">
            <summary>Public constructor for permission.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Permissions+CalendarWrite.CheckStatusAsync">
            <summary>Checks the status of a specific permission.</summary>
            <returns>The current status of the permission.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Permissions+CalendarWrite.RequestAsync">
            <summary>Request a specific permission from the user.</summary>
            <returns>The status of the permission that was requested.</returns>
            <remarks>The request will be prompted to the user if it hasn't been granted. iOS only allows the permission to be requested once, any additional requests will return immediatelly.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.Permissions+CalendarWrite.RequiredDeclarations">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.Permissions+CalendarWrite.RequiredInfoPlistKeys">
            <summary>Get a list of required keys in the info.plist.</summary>
            <value>List of required keys in the info.plist.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.Permissions+CalendarWrite.RequiredPermissions">
            <summary>Get a list of required permissions.</summary>
            <value>List of required permissions.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.Permissions+Camera">
            <summary>Permission to access the camera.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Essentials.Permissions+Camera">
            <summary>Public constructor for permission.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Permissions+Camera.CheckStatusAsync">
            <summary>Checks the status of a specific permission.</summary>
            <returns>The current status of the permission.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Permissions+Camera.RequestAsync">
            <summary>Request a specific permission from the user.</summary>
            <returns>The status of the permission that was requested.</returns>
            <remarks>The request will be prompted to the user if it hasn't been granted. iOS only allows the permission to be requested once, any additional requests will return immediatelly.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.Permissions+Camera.RequiredInfoPlistKeys">
            <summary>Get a list of required keys in the info.plist.</summary>
            <value>List of required keys in the info.plist.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.Permissions+Camera.RequiredPermissions">
            <summary>Get a list of required permissions.</summary>
            <value>List of required permissions.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.Permissions+ContactsRead">
            <summary>Permission to read contacts.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Essentials.Permissions+ContactsRead">
            <summary>Public constructor for permission.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Permissions+ContactsRead.CheckStatusAsync">
            <summary>Checks the status of a specific permission.</summary>
            <returns>The current status of the permission.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Permissions+ContactsRead.RequestAsync">
            <summary>Request a specific permission from the user.</summary>
            <returns>The status of the permission that was requested.</returns>
            <remarks>The request will be prompted to the user if it hasn't been granted. iOS only allows the permission to be requested once, any additional requests will return immediatelly.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.Permissions+ContactsRead.RequiredDeclarations">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.Permissions+ContactsRead.RequiredInfoPlistKeys">
            <summary>Get a list of required keys in the info.plist.</summary>
            <value>List of required keys in the info.plist.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.Permissions+ContactsRead.RequiredPermissions">
            <summary>Get a list of required permissions.</summary>
            <value>List of required permissions.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.Permissions+ContactsWrite">
            <summary>Permission to write contacts</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Essentials.Permissions+ContactsWrite">
            <summary>Public constructor for permission.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Permissions+ContactsWrite.CheckStatusAsync">
            <summary>Checks the status of a specific permission.</summary>
            <returns>The current status of the permission.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Permissions+ContactsWrite.RequestAsync">
            <summary>Request a specific permission from the user.</summary>
            <returns>The status of the permission that was requested.</returns>
            <remarks>The request will be prompted to the user if it hasn't been granted. iOS only allows the permission to be requested once, any additional requests will return immediatelly.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.Permissions+ContactsWrite.RequiredDeclarations">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.Permissions+ContactsWrite.RequiredInfoPlistKeys">
            <summary>Get a list of required keys in the info.plist.</summary>
            <value>List of required keys in the info.plist.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.Permissions+ContactsWrite.RequiredPermissions">
            <summary>Get a list of required permissions.</summary>
            <value>List of required permissions.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.Permissions+EventPermissions">
            <summary>Permission to access events.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Essentials.Permissions+EventPermissions">
            <summary>Public constructor for permission.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.Permissions+Flashlight">
            <summary>Permissiont to access the flashlight.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Essentials.Permissions+Flashlight">
            <summary>Public constructor for permission.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.Permissions+Flashlight.RequiredPermissions">
            <summary>Get a list of required permissions.</summary>
            <value>List of required permissions.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.Permissions+LaunchApp">
            <summary>Permissions to launch an app.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Essentials.Permissions+LaunchApp">
            <summary>Public constructor for permission.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.Permissions+LocationAlways">
            <summary>Permission for geolocation always.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Essentials.Permissions+LocationAlways">
            <summary>Public constructor for permission.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Permissions+LocationAlways.CheckStatusAsync">
            <summary>Checks the status of a specific permission.</summary>
            <returns>The current status of the permission.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Permissions+LocationAlways.RequestAsync">
            <summary>Request a specific permission from the user.</summary>
            <returns>The status of the permission that was requested.</returns>
            <remarks>The request will be prompted to the user if it hasn't been granted. iOS only allows the permission to be requested once, any additional requests will return immediatelly.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.Permissions+LocationAlways.RequiredDeclarations">
            <summary>Get a list of required declarations.</summary>
            <value>List of required declarations.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.Permissions+LocationAlways.RequiredInfoPlistKeys">
            <summary>Get a list of required keys in the info.plist.</summary>
            <value>List of required keys in the info.plist.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.Permissions+LocationAlways.RequiredPermissions">
            <summary>Get a list of required permissions.</summary>
            <value>List of required permissions.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.Permissions+LocationWhenInUse">
            <summary>Permission for geolocation when the app is in use.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Essentials.Permissions+LocationWhenInUse">
            <summary>Public constructor for permission.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Permissions+LocationWhenInUse.CheckStatusAsync">
            <summary>Checks the status of a specific permission.</summary>
            <returns>The current status of the permission.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.Permissions+LocationWhenInUse.RecommendedInfoPlistKeys">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Permissions+LocationWhenInUse.RequestAsync">
            <summary>Request a specific permission from the user.</summary>
            <returns>The status of the permission that was requested.</returns>
            <remarks>The request will be prompted to the user if it hasn't been granted. iOS only allows the permission to be requested once, any additional requests will return immediatelly.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.Permissions+LocationWhenInUse.RequiredDeclarations">
            <summary>Get a list of required declarations.</summary>
            <value>List of required declarations.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.Permissions+LocationWhenInUse.RequiredInfoPlistKeys">
            <summary>Get a list of required keys in the info.plist.</summary>
            <value>List of required keys in the info.plist.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.Permissions+LocationWhenInUse.RequiredPermissions">
            <summary>Get a list of required permissions.</summary>
            <value>List of required permissions.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.Permissions+Maps">
            <summary>Permission to access maps.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Essentials.Permissions+Maps">
            <summary>Public constructor for permission.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.Permissions+Media">
            <summary>Permission to access media on device.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Essentials.Permissions+Media">
            <summary>Public constructor for permission.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Permissions+Media.CheckStatusAsync">
            <summary>Checks the status of a specific permission.</summary>
            <returns>The current status of the permission.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Permissions+Media.RequestAsync">
            <summary>Request a specific permission from the user.</summary>
            <returns>The status of the permission that was requested.</returns>
            <remarks>The request will be prompted to the user if it hasn't been granted. iOS only allows the permission to be requested once, any additional requests will return immediatelly.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.Permissions+Media.RequiredInfoPlistKeys">
            <summary>Get a list of required keys in the info.plist.</summary>
            <value>List of required keys in the info.plist.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.Permissions+Microphone">
            <summary>Permission to access the microphone.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Essentials.Permissions+Microphone">
            <summary>Public constructor for permission.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Permissions+Microphone.CheckStatusAsync">
            <summary>Checks the status of a specific permission.</summary>
            <returns>The current status of the permission.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Permissions+Microphone.RequestAsync">
            <summary>Request a specific permission from the user.</summary>
            <returns>The status of the permission that was requested.</returns>
            <remarks>The request will be prompted to the user if it hasn't been granted. iOS only allows the permission to be requested once, any additional requests will return immediatelly.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.Permissions+Microphone.RequiredDeclarations">
            <summary>Get a list of required declarations.</summary>
            <value>List of required declarations.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.Permissions+Microphone.RequiredInfoPlistKeys">
            <summary>Get a list of required keys in the info.plist.</summary>
            <value>List of required keys in the info.plist.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.Permissions+Microphone.RequiredPermissions">
            <summary>Get a list of required permissions.</summary>
            <value>List of required permissions.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.Permissions+NetworkState">
            <summary>Permission to access the network state.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Essentials.Permissions+NetworkState">
            <summary>Public constructor for permission.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.Permissions+NetworkState.RequiredPermissions">
            <summary>
                <para>Get a list of required permissions.</para>
            </summary>
            <value>List of required permissions.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.Permissions+Phone">
            <summary>Permission to access the phone.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Essentials.Permissions+Phone">
            <summary>Public constructor for permission.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.Permissions+Phone.RequiredPermissions">
            <summary>Get a list of required permissions.</summary>
            <value>
                <para>List of required permissions.</para>
            </value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.Permissions+Photos">
            <summary>Permission to access the photo album.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Essentials.Permissions+Photos">
            <summary>Public constructor for permission.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Permissions+Photos.CheckStatusAsync">
            <summary>Checks the status of a specific permission.</summary>
            <returns>The current status of the permission.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Permissions+Photos.RequestAsync">
            <summary>Request a specific permission from the user.</summary>
            <returns>The status of the permission that was requested.</returns>
            <remarks>The request will be prompted to the user if it hasn't been granted. iOS only allows the permission to be requested once, any additional requests will return immediatelly.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.Permissions+Photos.RequiredInfoPlistKeys">
            <summary>Get a list of required keys in the info.plist.</summary>
            <value>List of required keys in the info.plist.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.Permissions+Reminders">
            <summary>Permission to access reminders.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Essentials.Permissions+Reminders">
            <summary>Public constructor for permission.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Permissions+Reminders.CheckStatusAsync">
            <summary>Checks the status of a specific permission.</summary>
            <returns>The current status of the permission.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Permissions+Reminders.RequestAsync">
            <summary>Request a specific permission from the user.</summary>
            <returns>The status of the permission that was requested.</returns>
            <remarks>The request will be prompted to the user if it hasn't been granted. iOS only allows the permission to be requested once, any additional requests will return immediatelly.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.Permissions+Reminders.RequiredInfoPlistKeys">
            <summary>Get a list of required keys in the info.plist.</summary>
            <value>List of required keys in the info.plist.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.Permissions+Sensors">
            <summary>Permission to access device sensors.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Essentials.Permissions+Sensors">
            <summary>Public constructor for permission.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Permissions+Sensors.CheckStatusAsync">
            <summary>Checks the status of a specific permission.</summary>
            <returns>The current status of the permission.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Permissions+Sensors.RequestAsync">
            <summary>Request a specific permission from the user.</summary>
            <returns>The status of the permission that was requested.</returns>
            <remarks>The request will be prompted to the user if it hasn't been granted. iOS only allows the permission to be requested once, any additional requests will return immediatelly.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.Permissions+Sensors.RequiredInfoPlistKeys">
            <summary>Get a list of required keys in the info.plist.</summary>
            <value>List of required keys in the info.plist.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.Permissions+Sensors.RequiredPermissions">
            <summary>Get a list of required permissions.</summary>
            <value>List of required permissions.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.Permissions+Sms">
            <summary>Permission to access Sms capabilities on device.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Essentials.Permissions+Sms">
            <summary>Public constructor for permission.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.Permissions+Sms.RequiredPermissions">
            <summary>Get a list of required permissions.</summary>
            <value>List of required permissions.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.Permissions+Speech">
            <summary>Permission to access speech capabilities on device.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Essentials.Permissions+Speech">
            <summary>Public constructor for permission.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Permissions+Speech.CheckStatusAsync">
            <summary>Checks the status of a specific permission.</summary>
            <returns>The current status of the permission.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Permissions+Speech.RequestAsync">
            <summary>Request a specific permission from the user.</summary>
            <returns>The status of the permission that was requested.</returns>
            <remarks>The request will be prompted to the user if it hasn't been granted. iOS only allows the permission to be requested once, any additional requests will return immediatelly.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.Permissions+Speech.RequiredInfoPlistKeys">
            <summary>Get a list of required keys in the info.plist.</summary>
            <value>List of required keys in the info.plist.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.Permissions+Speech.RequiredPermissions">
            <summary>Get a list of required permissions.</summary>
            <value>List of required permissions.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.Permissions+StorageRead">
            <summary>Permission to read storage.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Essentials.Permissions+StorageRead">
            <summary>Public constructor for permission.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.Permissions+StorageRead.RequiredPermissions">
            <summary>Get a list of required permissions.</summary>
            <value>List of required permissions.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.Permissions+StorageWrite">
            <summary>Permission to write to storage.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Essentials.Permissions+StorageWrite">
            <summary>Public constructor for permission.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.Permissions+StorageWrite.RequiredPermissions">
            <summary>Get a list of required permissions.</summary>
            <value>List of required permissions.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.Permissions+Vibrate">
            <summary>Permission to vibrate device.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Essentials.Permissions+Vibrate">
            <summary>Public constructor for permission.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.Permissions+Vibrate.RequiredPermissions">
            <summary>Get a list of required permissions.</summary>
            <value>List of required permissions.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.PermissionStatus">
            <summary>Status of the permission.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Essentials.PermissionStatus.Denied">
            <summary>The user has denied the permission.</summary>
        </member>
        <member name="F:Xamarin.Essentials.PermissionStatus.Disabled">
            <summary>The permission is disabled for the app.</summary>
        </member>
        <member name="F:Xamarin.Essentials.PermissionStatus.Granted">
            <summary>The user has granted permission.</summary>
        </member>
        <member name="F:Xamarin.Essentials.PermissionStatus.Restricted">
            <summary>The permission is in a restricted state.</summary>
        </member>
        <member name="F:Xamarin.Essentials.PermissionStatus.Unknown">
            <summary>The permission hasn't been granted or requested and is in an unknown state.</summary>
        </member>
        <member name="T:Xamarin.Essentials.PhoneDialer">
            <summary>Open the platform phone dialer to place a call.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.PhoneDialer.Open(System.String)">
            <param name="number">Phone number to initialize the dialer with. Example 15555555555</param>
            <summary>Open the phone dialer to a specific phone number.</summary>
            <remarks>
                <para>
          Throws ArgumentNullException if number is not valid.</para>
                <para>Throws FeatureNotSupportedException if placing phone call is not supported on the device.</para>
            </remarks>
        </member>
        <member name="T:Xamarin.Essentials.PickOptions">
            <summary>File picking options.</summary>
            <remarks>This file picking options object can be passed to a call to PickAsync().</remarks>
        </member>
        <member name="C:Xamarin.Essentials.PickOptions">
            <summary>Creates a default PickOptions object.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.PickOptions.Default">
            <summary>Default file picking options</summary>
            <value>A PickOptions object with default values.</value>
            <remarks>This object can be used when no special pick options are necessary.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.PickOptions.FileTypes">
            <summary>List of file types that file file picker should return.</summary>
            <value />
            <remarks>
          On Android and iOS the files not matching this list is only displayed grayed out.
          When the array is null or empty, all file types can be selected while picking.
          The contents of this array is platform specific; every platform has its own way to
          specify the file types.
          On Android you can specify one or more MIME types, e.g.
          "image/png"; also wild card characters can be used, e.g. "image/*".
          On iOS you can specify UTType constants, e.g. UTType.Image.
          On UWP, specify a list of extensions, like this: ".jpg", ".png".
        </remarks>
        </member>
        <member name="P:Xamarin.Essentials.PickOptions.Images">
            <summary>Predefined PickOptions object for picking image files only.</summary>
            <value />
            <remarks>
          Due to specifying the file types to pick being very platform specific, this predefined
          PickOptions object can be used for picking images.
        </remarks>
        </member>
        <member name="P:Xamarin.Essentials.PickOptions.PickerTitle">
            <summary>Title for the file picker.</summary>
            <value />
            <remarks>Note that the file picker title is only used on the Android platform.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.Placemark">
            <summary>User-friendly description of a geographic coordinate. This contains information such as the name of the place, its address, and other information.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.Placemark">
            <summary>Default constructor for placemark.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.Placemark(Xamarin.Essentials.Placemark)">
            <param name="placemark">Placemark to copy.</param>
            <summary>Constructor to create a deep copy.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.Placemark.AdminArea">
            <summary>Gets or sets the administrative area name of the address, for example, "CA", or null if it is unknown.</summary>
            <value>The admin area.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.Placemark.CountryCode">
            <summary>Gets or sets the country ISO code.</summary>
            <value>The country ISO code.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.Placemark.CountryName">
            <summary>Gets or sets the country name.</summary>
            <value>The country name.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.Placemark.FeatureName">
            <summary>Gets or sets the feature name.</summary>
            <value>The feature name.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.Placemark.Locality">
            <summary>Gets or sets the city or town.</summary>
            <value>The city or town of the locality.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.Placemark.Location">
            <summary>Gets or sets the location of the placemark.</summary>
            <value>The location of the placemark.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.Placemark.PostalCode">
            <summary>Gets or sets the postal code.</summary>
            <value>The postal code.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.Placemark.SubAdminArea">
            <summary>Gets or sets the sub-administrative area name of the address, for example, "Santa Clara County", or null if it is unknown.</summary>
            <value>The sub-admin area.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.Placemark.SubLocality">
            <summary>Gets or sets the sub locality.</summary>
            <value>The sub locality.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.Placemark.SubThoroughfare">
            <summary>Gets or sets optional info: sub street or region.</summary>
            <value>The sub thoroughfare.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.Placemark.Thoroughfare">
            <summary>Gets or sets the street name.</summary>
            <value>The street name.</value>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Placemark.ToString">
            <summary>A string representation of the placemark.</summary>
            <returns>Returns a string representation of the placemark.</returns>
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.PlacemarkExtensions">
            <summary>Extensions for the placemark.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.PlacemarkExtensions.OpenMapsAsync(Xamarin.Essentials.Placemark)">
            <param name="placemark">The placemark to open the map to.</param>
            <summary>Open the map to the placemark.</summary>
            <returns />
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.PlacemarkExtensions.OpenMapsAsync(Xamarin.Essentials.Placemark,Xamarin.Essentials.MapLaunchOptions)">
            <param name="placemark">A placemark to open the map to.</param>
            <param name="options">Options for opening the map.</param>
            <summary>Open the map to the placemark with options.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.Platform">
            <summary>Platform specific helpers.</summary>
            <remarks />
        </member>
        <member name="E:Xamarin.Essentials.Platform.ActivityStateChanged">
            <summary>Event that is triggered when any Android Activity's state changes.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.Platform.AppContext">
            <summary>The current application's context.</summary>
            <value>The applications context.</value>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Platform.ContinueUserActivity(UIKit.UIApplication,Foundation.NSUserActivity,UIKit.UIApplicationRestorationHandler)">
            <param name="application">The application.</param>
            <param name="userActivity">The user activity instance.</param>
            <param name="completionHandler">The completion handler.</param>
            <summary>Callback forwarded from the equivalent iOS AppDelegate method.</summary>
            <returns>True if the callback was handled.</returns>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.Platform.CurrentActivity">
            <summary>Gets the current Activity. This value is set OnCreate, OnPause, and OnResume.</summary>
            <value>The current Activity or null if none or Init was not called.</value>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Platform.GetCurrentUIViewController">
            <summary>Get the currently visible UIViewController.</summary>
            <returns>The visible UIViewController or null if not found.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Platform.Init(Android.App.Application)">
            <param name="application">Application to initialize with.</param>
            <summary>Initialize Xamarin.Essentials with Android's application class.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Platform.Init(Android.App.Activity,Android.OS.Bundle)">
            <param name="activity">Activity to use for initialization.</param>
            <param name="bundle">Bundle of the activity.</param>
            <summary>Initialize Xamarin.Essentials with Android's activity and bundle.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.Platform.MapServiceToken">
            <summary>Get or sets the map API key.</summary>
            <value>The current key for maps.</value>
            <remarks>Needed only for UWP and can be generated from Bing Maps.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Platform.OnLaunched(Windows.ApplicationModel.Activation.LaunchActivatedEventArgs)">
            <param name="e">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Platform.OnNewIntent(Android.Content.Intent)">
            <param name="intent">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Platform.OnRequestPermissionsResult(System.Int32,System.String[],Android.Content.PM.Permission[])">
            <param name="requestCode">The requestCode from the corresponding overridden method in an activity.</param>
            <param name="permissions">The permissions from the corresponding overridden method in an activity.</param>
            <param name="grantResults">The grantResults from the corresponding overridden method in an activity.</param>
            <summary>Pass permission request results from an activity's overridden method to the library for handling internal permission requests.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Platform.OnResume(Android.App.Activity)">
            <param name="activity">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Platform.OpenUrl(UIKit.UIApplication,Foundation.NSUrl,Foundation.NSDictionary)">
            <param name="app">To be added.</param>
            <param name="url">To be added.</param>
            <param name="options">To be added.</param>
            <summary>Passes the OpenUrl callback of your app to be used for internal API handling.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Platform.PerformActionForShortcutItem(UIKit.UIApplication,UIKit.UIApplicationShortcutItem,UIKit.UIOperationHandler)">
            <param name="application">To be added.</param>
            <param name="shortcutItem">To be added.</param>
            <param name="completionHandler">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Platform.WaitForActivityAsync(System.Threading.CancellationToken)">
            <param name="cancelToken">Cancellation token to stop waiting for Activity to be created or active.</param>
            <summary>Wait for an Activity to be create or active.</summary>
            <returns>The current Android Activity.</returns>
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.Platform+Intent">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:Xamarin.Essentials.Platform+Intent.ActionAppAction">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.PointExtensions">
            <summary>Extension methods for Point.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.PointExtensions.ToSystemPoint(Android.Graphics.Point)">
            <param name="point">The point to convert.</param>
            <summary>Converts the point ot the system representation.</summary>
            <returns>The converted point.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.PointExtensions.ToSystemPoint(CoreGraphics.CGPoint)">
            <param name="point">The point to convert.</param>
            <summary>Converts the point ot the system representation.</summary>
            <returns>The converted point.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.PointExtensions.ToSystemPoint(Windows.Foundation.Point)">
            <param name="point">The point to convert.</param>
            <summary>Converts the point ot the system representation.</summary>
            <returns>The converted point.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.PointExtensions.ToSystemPointF(Android.Graphics.PointF)">
            <param name="point">The point to convert.</param>
            <summary>Converts the point ot the system representation.</summary>
            <returns>The converted point.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.PointExtensions.ToSystemPointF(CoreGraphics.CGPoint)">
            <param name="point">The point to convert.</param>
            <summary>Converts the point ot the system representation.</summary>
            <returns>The converted point.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.PointExtensions.ToSystemPointF(Windows.Foundation.Point)">
            <param name="point">The point to convert.</param>
            <summary>Converts the point ot the system representation.</summary>
            <returns>The converted point.</returns>
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.Preferences">
            <summary>A class to interact with the preferences/settings of the native platform.</summary>
            <remarks>
                <para>Each platform uses the platform provided native APIs for storing application/user preferences:</para>
                <list type="bullet">
                    <item>
                        <term>iOS: NSUserDefaults</term>
                    </item>
                    <item>
                        <term>Android: SharedPreferences</term>
                    </item>
                    <item>
                        <term>UWP: ApplicationDataContainer</term>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="M:Xamarin.Essentials.Preferences.Clear">
            <summary>Clears all keys and values.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Preferences.Clear(System.String)">
            <param name="sharedName">Shared container name.</param>
            <summary>Clears all keys and values.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Preferences.ContainsKey(System.String)">
            <param name="key">Preference key.</param>
            <summary>Checks the existence of a given key.</summary>
            <returns>Returns true if the key exists.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Preferences.ContainsKey(System.String,System.String)">
            <param name="key">Preference key.</param>
            <param name="sharedName">Shared container name.</param>
            <summary>Checks the existence of a given key.</summary>
            <returns>Returns true if the key exists.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Preferences.Get(System.String,System.Boolean)">
            <param name="key">Preference key.</param>
            <param name="defaultValue">Default value to return if the key does not exist.</param>
            <summary>Gets the value for a given key, or the default specified if the key does not exist.</summary>
            <returns>Value for the given key, or the default if it does not exist.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Preferences.Get(System.String,System.DateTime)">
            <param name="key">Preference key.</param>
            <param name="defaultValue">Default value to return if the key does not exist.</param>
            <summary>Gets the value for a given key, or the default specified if the key does not exist.</summary>
            <returns>Value for the given key, or the default if it does not exist.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Preferences.Get(System.String,System.Double)">
            <param name="key">Preference key.</param>
            <param name="defaultValue">Default value to return if the key does not exist.</param>
            <summary>Gets the value for a given key, or the default specified if the key does not exist.</summary>
            <returns>Value for the given key, or the default if it does not exist.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Preferences.Get(System.String,System.Int32)">
            <param name="key">Preference key.</param>
            <param name="defaultValue">Default value to return if the key does not exist.</param>
            <summary>Gets the value for a given key, or the default specified if the key does not exist.</summary>
            <returns>Value for the given key, or the default if it does not exist.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Preferences.Get(System.String,System.Int64)">
            <param name="key">Preference key.</param>
            <param name="defaultValue">Default value to return if the key does not exist.</param>
            <summary>Gets the value for a given key, or the default specified if the key does not exist.</summary>
            <returns>Value for the given key, or the default if it does not exist.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Preferences.Get(System.String,System.Single)">
            <param name="key">Preference key.</param>
            <param name="defaultValue">Default value to return if the key does not exist.</param>
            <summary>Gets the value for a given key, or the default specified if the key does not exist.</summary>
            <returns>Value for the given key, or the default if it does not exist.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Preferences.Get(System.String,System.String)">
            <param name="key">Preference key.</param>
            <param name="defaultValue">Default value to return if the key does not exist.</param>
            <summary>Gets the value for a given key, or the default specified if the key does not exist.</summary>
            <returns>Value for the given key, or the default if it does not exist.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Preferences.Get(System.String,System.Boolean,System.String)">
            <param name="key">Preference key.</param>
            <param name="defaultValue">Default value to return if the key does not exist.</param>
            <param name="sharedName">Shared container key.</param>
            <summary>Gets the value for a given key, or the default specified if the key does not exist.</summary>
            <returns>Value for the given key, or the default if it does not exist.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Preferences.Get(System.String,System.DateTime,System.String)">
            <param name="key">Preference key.</param>
            <param name="defaultValue">Default value to return if the key does not exist.</param>
            <param name="sharedName">Shared container key.</param>
            <summary>Gets the value for a given key, or the default specified if the key does not exist.</summary>
            <returns>Value for the given key, or the default if it does not exist.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Preferences.Get(System.String,System.Double,System.String)">
            <param name="key">Preference key.</param>
            <param name="defaultValue">Default value to return if the key does not exist.</param>
            <param name="sharedName">Shared container key.</param>
            <summary>Gets the value for a given key, or the default specified if the key does not exist.</summary>
            <returns>Value for the given key, or the default if it does not exist.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Preferences.Get(System.String,System.Int32,System.String)">
            <param name="key">Preference key.</param>
            <param name="defaultValue">Default value to return if the key does not exist.</param>
            <param name="sharedName">Shared container key.</param>
            <summary>Gets the value for a given key, or the default specified if the key does not exist.</summary>
            <returns>Value for the given key, or the default if it does not exist.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Preferences.Get(System.String,System.Int64,System.String)">
            <param name="key">Preference key.</param>
            <param name="defaultValue">Default value to return if the key does not exist.</param>
            <param name="sharedName">Shared container key.</param>
            <summary>Gets the value for a given key, or the default specified if the key does not exist.</summary>
            <returns>Value for the given key, or the default if it does not exist.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Preferences.Get(System.String,System.Single,System.String)">
            <param name="key">Preference key.</param>
            <param name="defaultValue">Default value to return if the key does not exist.</param>
            <param name="sharedName">Shared container key.</param>
            <summary>Gets the value for a given key, or the default specified if the key does not exist.</summary>
            <returns>Value for the given key, or the default if it does not exist.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Preferences.Get(System.String,System.String,System.String)">
            <param name="key">Preference key.</param>
            <param name="defaultValue">Default value to return if the key does not exist.</param>
            <param name="sharedName">Shared container key.</param>
            <summary>Gets the value for a given key, or the default specified if the key does not exist.</summary>
            <returns>Value for the given key, or the default if it does not exist.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Preferences.Remove(System.String)">
            <param name="key">Preference key.</param>
            <summary>Removes a key and its associated value if it exists.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Preferences.Remove(System.String,System.String)">
            <param name="key">Preference key.</param>
            <param name="sharedName">Shared container name.</param>
            <summary>Removes a key and its associated value if it exists.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Preferences.Set(System.String,System.Boolean)">
            <param name="key">Preference key.</param>
            <param name="value">Preference value.</param>
            <summary>Sets a value for a given key.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Preferences.Set(System.String,System.DateTime)">
            <param name="key">Preference key.</param>
            <param name="value">Preference value.</param>
            <summary>Sets a value for a given key.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Preferences.Set(System.String,System.Double)">
            <param name="key">Preference key.</param>
            <param name="value">Preference value.</param>
            <summary>Sets a value for a given key.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Preferences.Set(System.String,System.Int32)">
            <param name="key">Preference key.</param>
            <param name="value">Preference value.</param>
            <summary>Sets a value for a given key.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Preferences.Set(System.String,System.Int64)">
            <param name="key">Preference key.</param>
            <param name="value">Preference value.</param>
            <summary>Sets a value for a given key.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Preferences.Set(System.String,System.Single)">
            <param name="key">Preference key.</param>
            <param name="value">Preference value.</param>
            <summary>Sets a value for a given key.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Preferences.Set(System.String,System.String)">
            <param name="key">Preference key.</param>
            <param name="value">Preference value.</param>
            <summary>Sets a value for a given key.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Preferences.Set(System.String,System.Boolean,System.String)">
            <param name="key">Preference key.</param>
            <param name="value">Preference value.</param>
            <param name="sharedName">Shared container name.</param>
            <summary>Sets a value for a given key.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Preferences.Set(System.String,System.DateTime,System.String)">
            <param name="key">Preference key.</param>
            <param name="value">Preference value.</param>
            <param name="sharedName">Shared container name.</param>
            <summary>Sets a value for a given key.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Preferences.Set(System.String,System.Double,System.String)">
            <param name="key">Preference key.</param>
            <param name="value">Preference value.</param>
            <param name="sharedName">Shared container name.</param>
            <summary>Sets a value for a given key.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Preferences.Set(System.String,System.Int32,System.String)">
            <param name="key">Preference key.</param>
            <param name="value">Preference value.</param>
            <param name="sharedName">Shared container name.</param>
            <summary>Sets a value for a given key.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Preferences.Set(System.String,System.Int64,System.String)">
            <param name="key">Preference key.</param>
            <param name="value">Preference value.</param>
            <param name="sharedName">Shared container name.</param>
            <summary>Sets a value for a given key.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Preferences.Set(System.String,System.Single,System.String)">
            <param name="key">Preference key.</param>
            <param name="value">Preference value.</param>
            <param name="sharedName">Shared container name.</param>
            <summary>Sets a value for a given key.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Preferences.Set(System.String,System.String,System.String)">
            <param name="key">Preference key.</param>
            <param name="value">Preference value.</param>
            <param name="sharedName">Shared container name.</param>
            <summary>Sets a value for a given key.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.ReadOnlyFile">
            <summary>A representation of a file and its content type.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.ReadOnlyFile(System.String)">
            <param name="fullPath">Full file path.</param>
            <summary>Construct a file taking in file path.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.ReadOnlyFile(Xamarin.Essentials.FileBase)">
            <param name="file">File to use for ReadOnlyFile</param>
            <summary>Construct a file taking in file.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.ReadOnlyFile(System.String,System.String)">
            <param name="fullPath">Full file path.</param>
            <param name="contentType">Content type (MIME type) of the file (eg: `image/png`).</param>
            <summary>Construct a file taking in file path and content type (MIME type).</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.RectangleExtensions">
            <summary>Extension methods for Rectangle.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.RectangleExtensions.ToSystemRectangle(Android.Graphics.Rect)">
            <param name="rect">The base rectangle to convert.</param>
            <summary>Convert to system rectangle.</summary>
            <returns>The converted rectangle.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.RectangleExtensions.ToSystemRectangle(CoreGraphics.CGRect)">
            <param name="rect">The base rectangle to convert.</param>
            <summary>Convert to system rectangle.</summary>
            <returns>The converted rectangle.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.RectangleExtensions.ToSystemRectangle(Windows.Foundation.Rect)">
            <param name="rect">The base rectangle to convert.</param>
            <summary>Convert to system rectangle.</summary>
            <returns>The converted rectangle.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.RectangleExtensions.ToSystemRectangleF(Android.Graphics.RectF)">
            <param name="rect">The base rectangle to convert.</param>
            <summary>Convert to system rectangle.</summary>
            <returns>The converted rectangle.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.RectangleExtensions.ToSystemRectangleF(CoreGraphics.CGRect)">
            <param name="rect">The base rectangle to convert.</param>
            <summary>Convert to system rectangle.</summary>
            <returns>The converted rectangle.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.RectangleExtensions.ToSystemRectangleF(Windows.Foundation.Rect)">
            <param name="rect">The base rectangle to convert.</param>
            <summary>Convert to system rectangle.</summary>
            <returns>The converted rectangle.</returns>
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.Screenshot">
            <summary>Take a screenshot depicting the current View.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Screenshot.CaptureAsync">
            <summary>Capture the screen.</summary>
            <returns>Returns the caprured screenshot.</returns>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.Screenshot.IsCaptureSupported">
            <summary>Gets a value indicating whether capturing screenshots are supported.</summary>
            <value />
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.ScreenshotFormat">
            <summary>The format to read screenshot images.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Essentials.ScreenshotFormat.Jpeg">
            <summary>Read the screenshot image as a JPEG.</summary>
        </member>
        <member name="F:Xamarin.Essentials.ScreenshotFormat.Png">
            <summary>Read the screenshot image as a PNG.</summary>
        </member>
        <member name="T:Xamarin.Essentials.ScreenshotResult">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Essentials.ScreenshotResult(System.Int32,System.Int32,Windows.Storage.Streams.IBuffer)">
            <param name="width">To be added.</param>
            <param name="height">To be added.</param>
            <param name="pixels">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.ScreenshotResult.Height">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.ScreenshotResult.OpenReadAsync(Xamarin.Essentials.ScreenshotFormat)">
            <param name="format">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.ScreenshotResult.Width">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.SecureStorage">
            <summary>Provides simple secure storage for key/value pairs.</summary>
            <remarks>
                <para>Each platform uses the platform provided native API's for storing data securely:</para>
                <list type="bullet">
                    <item>
                        <term>iOS: Data is stored in KeyChain. Additional information on SecAccessible at: <see cref="T:Security.SecAccessible" /></term>
                    </item>
                    <item>
                        <term>Android: Encryption keys are stored in KeyStore and encrypted data is stored in a named shared preference container (PackageId.Xamarin.Essentials).</term>
                    </item>
                    <item>
                        <term>UWP: Data is encrypted with DataProtectionProvider and stored in a named ApplicationDataContainer (with a container name of ApplicationId.Xamarin.Essentials).</term>
                    </item>
                </list>
                <para>NOTE: On Android devices running below API 23 (6.0 Marshmallow) there is no AES available in KeyStore.  As a best practice this API will generate an RSA/ECB/PKCS7Padding key pair stored in KeyStore (the only type supported in KeyStore by these lower API levels), which is used to wrap an AES key generated at runtime.  This wrapped key is stored in Preferences.</para>
            </remarks>
        </member>
        <member name="P:Xamarin.Essentials.SecureStorage.DefaultAccessible">
            <summary>iOS: Default SecAccessible to use for all Get/Set calls to KeyChain. Default value is AfterFirstUnlock.</summary>
            <value>The SecAccessible to use for all KeyChain access.</value>
            <remarks>For more information see: <see cref="T:Security.SecAccessible" /></remarks>
        </member>
        <member name="M:Xamarin.Essentials.SecureStorage.GetAsync(System.String)">
            <param name="key">Storage Key.</param>
            <summary>Gets the decrypted value for a given Key.</summary>
            <returns>Decrypted string or null if key does not exist.</returns>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.SecureStorage.LegacyKeyHashFallback">
            <summary>When set to `true` if the key/value pair is not found, the MD5 key hash is also used to attempt to locate a value.</summary>
            <value />
            <remarks>Before version 1.5.3, the key/value pair was stored with the key's MD5 hash instead of the key directly.  As of 1.5.3 and newer the key hash is no longer used.  When using the legacy fallback, and an old MD5 key hash is encountered, it is migrated to the new key/value pair and the old MD5 key hash / value pair is removed.  In future versions this will be set to false by default.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.SecureStorage.Remove(System.String)">
            <param name="key">The key to remove.</param>
            <summary>Removes the encrypted key/value pair for the given key.</summary>
            <returns>Returns true if the key value pair was removed.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.SecureStorage.RemoveAll">
            <summary>Removes all of the stored encrypted key/value pairs.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.SecureStorage.SetAsync(System.String,System.String)">
            <param name="key">Storage Key.</param>
            <param name="value">The value to be encrypted.</param>
            <summary>Stores the value which is encrypted, for a given Key.</summary>
            <returns />
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.SecureStorage.SetAsync(System.String,System.String,Security.SecAccessible)">
            <param name="key">Storage Key.</param>
            <param name="value">The value to be encrypted.</param>
            <param name="accessible">The KeyChain accessibility to create the encrypted record with.</param>
            <summary>Stores the value which is encrypted, for a given Key. iOS override to specify SecAccessible for the KeyChain.</summary>
            <returns />
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.SensorSpeed">
            <summary>Sensor speed to monitor for changes.</summary>
            <remarks />
        </member>
        <member name="F:Xamarin.Essentials.SensorSpeed.Default">
            <summary>The default sensor speed.</summary>
        </member>
        <member name="F:Xamarin.Essentials.SensorSpeed.Fastest">
            <summary>Get the sensor data as fast as possible.</summary>
        </member>
        <member name="F:Xamarin.Essentials.SensorSpeed.Game">
            <summary>Rate suitable for games.</summary>
        </member>
        <member name="F:Xamarin.Essentials.SensorSpeed.UI">
            <summary>Rate suitable for general user interface.</summary>
        </member>
        <member name="T:Xamarin.Essentials.Share">
            <summary>Share data such as text and uris to other applications.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Share.RequestAsync(System.String)">
            <param name="text">Text to share.</param>
            <summary>Show the share user interface to share text.</summary>
            <returns>Task when completed.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Share.RequestAsync(Xamarin.Essentials.ShareFileRequest)">
            <param name="request">File request to share.</param>
            <summary>Show the user interface to share a file.</summary>
            <returns>Task when completed.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Share.RequestAsync(Xamarin.Essentials.ShareMultipleFilesRequest)">
            <param name="request">Multiple Files request to share.</param>
            <summary>Show the user interface to share a multiple files.</summary>
            <returns>Task when completed.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Share.RequestAsync(Xamarin.Essentials.ShareTextRequest)">
            <param name="request">Share request with options.</param>
            <summary>Show the share user interface to share text or uri.</summary>
            <returns>Task when completed.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Share.RequestAsync(System.String,System.String)">
            <param name="text">Text to share.</param>
            <param name="title">Title for the share user interface.</param>
            <summary>Show the share user interface to share text with a title.</summary>
            <returns>Task when completed.</returns>
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.ShareFile">
            <summary>A file to be shared.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.ShareFile(System.String)">
            <param name="fullPath">The full path and filename.</param>
            <summary>File to be shared.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.ShareFile(Xamarin.Essentials.FileBase)">
            <param name="file">Existing file to be shared.</param>
            <summary>Shares an existing file.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.ShareFile(System.String,System.String)">
            <param name="fullPath">Full path and filename.</param>
            <param name="contentType">Explicit content type (MIME type) of the file (eg: `image/png`).</param>
            <summary />
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.ShareFileRequest">
            <summary>Standard request for sharing a file to another application.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.ShareFileRequest">
            <summary>Default constructor.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.ShareFileRequest(Xamarin.Essentials.FileBase)">
            <param name="file">Existing file.</param>
            <summary>Share request with an existing file.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.ShareFileRequest(Xamarin.Essentials.ShareFile)">
            <param name="file">Existing file.</param>
            <summary>Share request with an existing file.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.ShareFileRequest(System.String,Xamarin.Essentials.FileBase)">
            <param name="title">Title to use on the share user interface.</param>
            <param name="file">Existing file.</param>
            <summary>Share request with an existing file.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.ShareFileRequest(System.String,Xamarin.Essentials.ShareFile)">
            <param name="title">Title to use on the share user interface.</param>
            <param name="file">Existing file.</param>
            <summary>Share requerst with an existing file.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.ShareFileRequest.File">
            <summary>Gets or sets the file to share.</summary>
            <value />
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.ShareMultipleFilesRequest">
            <summary>Standard request for sharing a multiple files to another application.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.ShareMultipleFilesRequest">
            <summary>Default constructor.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.ShareMultipleFilesRequest(System.Collections.Generic.IEnumerable{Xamarin.Essentials.FileBase})">
            <param name="files">Existing files.</param>
            <summary>Share request with an existing files.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.ShareMultipleFilesRequest(System.Collections.Generic.IEnumerable{Xamarin.Essentials.ShareFile})">
            <param name="files">Existing files.</param>
            <summary>Share request with an existing files.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.ShareMultipleFilesRequest(System.String,System.Collections.Generic.IEnumerable{Xamarin.Essentials.FileBase})">
            <param name="title">Title to use on the share user interface.</param>
            <param name="files">Existing files.</param>
            <summary>Share request with an existing files.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.ShareMultipleFilesRequest(System.String,System.Collections.Generic.IEnumerable{Xamarin.Essentials.ShareFile})">
            <param name="title">Title to use on the share user interface.</param>
            <param name="files">Existing files.</param>
            <summary>Share requerst with an existing files.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.ShareMultipleFilesRequest.Files">
            <summary>Gets or sets the files to share.</summary>
            <value />
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.ShareMultipleFilesRequest.op_Explicit(Xamarin.Essentials.ShareFileRequest)~Xamarin.Essentials.ShareMultipleFilesRequest">
            <param name="request">The request to convert into a multi-file request.</param>
            <summary>Convert a single file share request into a multi-file share request.</summary>
            <returns>Returns a multi-file share request containing the single file.</returns>
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.ShareRequestBase">
            <summary />
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.ShareRequestBase">
            <summary />
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.ShareRequestBase.PresentationSourceBounds">
            <summary>Gets or sets the source rectangle to display the Share UI from.</summary>
            <value />
            <remarks>This is only used on iOS currently.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.ShareRequestBase.Title">
            <summary>Gets or sets the title to use on the share user interface</summary>
            <value>The title to be displayed.</value>
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.ShareTextRequest">
            <summary>Standard request for sharing text to other applications.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.ShareTextRequest">
            <summary>Default constructor.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.ShareTextRequest(System.String)">
            <param name="text">Text to share.</param>
            <summary>Share request with text.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.ShareTextRequest(System.String,System.String)">
            <param name="text">Text to share.</param>
            <param name="title">Title for share user interface.</param>
            <summary>Share request with text and title.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.ShareTextRequest.Subject">
            <summary>Gets or sets the subject that is sometimes used for applications such as mail clients.</summary>
            <value>The subject.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.ShareTextRequest.Text">
            <summary>Gets or sets the main text or message to share.</summary>
            <value>The main text.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.ShareTextRequest.Uri">
            <summary>Gets or sets a valid Uri to share.</summary>
            <value>The uri that will be shared.</value>
            <remarks>This must be a valid uri or an exception will be thrown.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.SizeExtensions">
            <summary>Extension methods for Size.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.SizeExtensions.ToSystemSize(Android.Util.Size)">
            <param name="size">Base size to convert.</param>
            <summary>Convert to system Size.</summary>
            <returns>Converted size.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.SizeExtensions.ToSystemSize(CoreGraphics.CGSize)">
            <param name="size">Base size to convert.</param>
            <summary>Convert to system Size.</summary>
            <returns>Converted size.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.SizeExtensions.ToSystemSize(Windows.Foundation.Size)">
            <param name="size">Base size to convert.</param>
            <summary>Convert to system Size.</summary>
            <returns>Converted size.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.SizeExtensions.ToSystemSizeF(Android.Util.SizeF)">
            <param name="size">Base size to convert.</param>
            <summary>Convert to system SizeF.</summary>
            <returns>Converted size.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.SizeExtensions.ToSystemSizeF(CoreGraphics.CGSize)">
            <param name="size">Base size to convert.</param>
            <summary>Convert to system SizeF.</summary>
            <returns>Converted size.</returns>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.SizeExtensions.ToSystemSizFe(Windows.Foundation.Size)">
            <param name="size">Base size to convert.</param>
            <summary>Convert to system SizeF.</summary>
            <returns>Converted size.</returns>
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.Sms">
            <summary>Provides an easy way to allow the user to send SMS messages.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Sms.ComposeAsync">
            <summary>Opens the default SMS client to allow the user to send the message.</summary>
            <returns />
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Sms.ComposeAsync(Xamarin.Essentials.SmsMessage)">
            <param name="message">The message to send.</param>
            <summary>Opens the default SMS client to allow the user to send the message.</summary>
            <returns />
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.SmsMessage">
            <summary>Represents a single SMS message.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.SmsMessage">
            <summary>Creates a new instance of SmsMessage</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.SmsMessage(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <param name="body">Content of the message</param>
            <param name="recipients">Recipients to receive the message.</param>
            <summary>Creates a new instance of SmsMessage</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.SmsMessage(System.String,System.String)">
            <param name="body">Content of the message</param>
            <param name="recipient">Recipient to receive the message.</param>
            <summary>Creates a new instance of SmsMessage</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.SmsMessage.Body">
            <summary>Gets the body of the message.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.SmsMessage.Recipients">
            <summary>Gets the recipient of the message.</summary>
            <value />
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.SpeechOptions">
            <summary>Text-to-speech options.</summary>
            <remarks />
        </member>
        <member name="C:Xamarin.Essentials.SpeechOptions">
            <summary />
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.SpeechOptions.Locale">
            <summary>Gets or Sets a specific Locale to use with text to speech.</summary>
            <value />
            <remarks>The Language property should match a Locale value returned by GetLocalesAsync().</remarks>
        </member>
        <member name="P:Xamarin.Essentials.SpeechOptions.Pitch">
            <summary>The pitch to use when speaking.</summary>
            <value />
            <remarks>This value should be between 0f and 2.0f.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.SpeechOptions.Volume">
            <summary>The volume to use when speaking.</summary>
            <value />
            <remarks>This value should be between 0f and 1.0f.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.TextToSpeech">
            <summary>Speak text to Speech</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.TextToSpeech.GetLocalesAsync">
            <summary>Gets a list of Locales supported by Text to Speech.</summary>
            <returns />
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.TextToSpeech.SpeakAsync(System.String,System.Threading.CancellationToken)">
            <param name="text">The text to speak..</param>
            <param name="cancelToken">Optional cancellation token to stop speaking.</param>
            <summary>Speaks the given text with default options.</summary>
            <returns />
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.TextToSpeech.SpeakAsync(System.String,Xamarin.Essentials.SpeechOptions,System.Threading.CancellationToken)">
            <param name="text">The text to speak.</param>
            <param name="options">The options to use for speaking.</param>
            <param name="cancelToken">Optional cancellation token to stop speaking.</param>
            <summary>Speaks the given text with the specified options.</summary>
            <returns />
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.UnitConverters">
            <summary>Built in unit converters</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.UnitConverters.AtmospheresToPascals(System.Double)">
            <param name="atm">Atmospheres to convert</param>
            <summary>Atmospheres to Pascals</summary>
            <returns>The pascals value</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.UnitConverters.CelsiusToFahrenheit(System.Double)">
            <param name="celsius">The temperature in celsius to convert</param>
            <summary>Celsius to Fahrenheit </summary>
            <returns>The temperature in fahrenheit</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.UnitConverters.CelsiusToKelvin(System.Double)">
            <param name="celsius">The temperature in Celsius to convert</param>
            <summary>Celsius to Kelvin</summary>
            <returns>The temperature in Kelvin</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.UnitConverters.CoordinatesToKilometers(System.Double,System.Double,System.Double,System.Double)">
            <param name="lat1">First latitude</param>
            <param name="lon1">First longitude</param>
            <param name="lat2">Second latitude</param>
            <param name="lon2">Second longitude</param>
            <summary>Calulate the distance between two coordinate in kilometers</summary>
            <returns>Distance in kilometers</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.UnitConverters.CoordinatesToMiles(System.Double,System.Double,System.Double,System.Double)">
            <param name="lat1">First latitude</param>
            <param name="lon1">First longitude</param>
            <param name="lat2">Second latitude</param>
            <param name="lon2">Second longitude</param>
            <summary>Calulate the distance between two coordinate in miles</summary>
            <returns>Distance in miles</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.UnitConverters.DegreesPerSecondToHertz(System.Double)">
            <param name="degrees">The degrees to convert</param>
            <summary>Converte degrees per second to hertz</summary>
            <returns>Value in hertz</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.UnitConverters.DegreesPerSecondToRadiansPerSecond(System.Double)">
            <param name="degrees">Degrees to convert</param>
            <summary>Convert degrees per second to radians per second</summary>
            <returns>Value in radians</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.UnitConverters.DegreesToRadians(System.Double)">
            <param name="degrees">Degrees to convert</param>
            <summary>Convert degrees to radian</summary>
            <returns>The value in radians</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.UnitConverters.FahrenheitToCelsius(System.Double)">
            <param name="fahrenheit">The value in fahrenheit to convert</param>
            <summary>Converter fahrenheit to celsius</summary>
            <returns>The value in celsius</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.UnitConverters.HectopascalsToKilopascals(System.Double)">
            <param name="hpa">Hectopascals to convert</param>
            <summary>Convert hectopascals to kilopascals</summary>
            <returns>The value in kilopascals</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.UnitConverters.HectopascalsToPascals(System.Double)">
            <param name="hpa">The value to convert in Hectopascals</param>
            <summary>Convert hectopascals to pascals</summary>
            <returns>The value in pascals</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.UnitConverters.HertzToDegreesPerSecond(System.Double)">
            <param name="hertz">The value in hertz to convert</param>
            <summary>Convert hertz to degrees per second</summary>
            <returns>The value in degrees per second</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.UnitConverters.HertzToRadiansPerSecond(System.Double)">
            <param name="hertz">The value in hertz to convert</param>
            <summary>Convert hertz to radians per second</summary>
            <returns>The value in radians per second</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.UnitConverters.InternationalFeetToMeters(System.Double)">
            <param name="internationalFeet">The feet to convert</param>
            <summary>Convert international feet to meters</summary>
            <returns>The value in meters</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.UnitConverters.KelvinToCelsius(System.Double)">
            <param name="kelvin">The kelvin value to convert</param>
            <summary>Convert kelvin to celsius</summary>
            <returns>The value in celsius</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.UnitConverters.KilogramsToPounds(System.Double)">
            <param name="kilograms">The value in kilograms to convert</param>
            <summary>Convert kilograms to pounds</summary>
            <returns>The value in pounds.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.UnitConverters.KilometersToMiles(System.Double)">
            <param name="kilometers">The kilometers to convert</param>
            <summary>Convert kilometers to miles</summary>
            <returns>The value in miles.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.UnitConverters.KilopascalsToHectopascals(System.Double)">
            <param name="kpa">The value in kilopascals to convert</param>
            <summary>Convert kilopascals to hectopascals</summary>
            <returns>The value in hectopascals</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.UnitConverters.KilopascalsToPascals(System.Double)">
            <param name="kpa">The value in kilopascals to convert</param>
            <summary>Convert kilopascals to pascals</summary>
            <returns>The value in pascals</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.UnitConverters.MetersToInternationalFeet(System.Double)">
            <param name="meters">The value in meters to convert</param>
            <summary>Convert meters to international feet</summary>
            <returns>The value in feet</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.UnitConverters.MetersToUSSurveyFeet(System.Double)">
            <param name="meters">The value in meters to convert</param>
            <summary>Convert meters to US survey feet</summary>
            <returns>The value in US survey feet</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.UnitConverters.MilesToKilometers(System.Double)">
            <param name="miles">The value in miles to convert</param>
            <summary>Convert miles to kilometers</summary>
            <returns>The value in kilometers</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.UnitConverters.MilesToMeters(System.Double)">
            <param name="miles">The value in miles to convert</param>
            <summary>Convert miles to meters</summary>
            <returns>The value in meters</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.UnitConverters.PascalsToAtmospheres(System.Double)">
            <param name="pascals">The value in pascals to convert</param>
            <summary>Convert pascals to atmospheres</summary>
            <returns>The value in atmospheres</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.UnitConverters.PoundsToKilograms(System.Double)">
            <param name="pounds">The value in pounds to convert</param>
            <summary>Convert pounds to kilograms</summary>
            <returns>The value in kilograms</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.UnitConverters.PoundsToStones(System.Double)">
            <param name="pounds">The value in pounds to convert</param>
            <summary>Convert pounds to stones</summary>
            <returns>The value in stones</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.UnitConverters.RadiansPerSecondToDegreesPerSecond(System.Double)">
            <param name="radians">The value of radians per second to convert</param>
            <summary>Convert radians per second to degrees per second</summary>
            <returns>The value in degrees per second</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.UnitConverters.RadiansPerSecondToHertz(System.Double)">
            <param name="radians">The value of radians per second to convert</param>
            <summary>Convert radians per second to hertz</summary>
            <returns>The value in hertz</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.UnitConverters.RadiansToDegrees(System.Double)">
            <param name="radians">The value in radians to convert</param>
            <summary>Convert radians to degrees</summary>
            <returns>The value in degrees</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.UnitConverters.StonesToPounds(System.Double)">
            <param name="stones">The value in stones to convert</param>
            <summary>Convert stones to pounds</summary>
            <returns>The value in pounds</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.UnitConverters.USSurveyFeetToMeters(System.Double)">
            <param name="usFeet">The value in US Survey Feet to convert</param>
            <summary>Convert US survey feet to meteres</summary>
            <returns>The value in meters.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.VersionTracking">
            <summary>Provides an easy way to track an app's version on a device.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.VersionTracking.BuildHistory">
            <summary>Gets the collection of build numbers of the app that ran on this device.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.VersionTracking.CurrentBuild">
            <summary>Gets the current build of the app.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.VersionTracking.CurrentVersion">
            <summary>Gets the current version number of the app.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.VersionTracking.FirstInstalledBuild">
            <summary>Gets the build number of first version of the app that was installed on this device.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.VersionTracking.FirstInstalledVersion">
            <summary>Gets the version number of the first version of the app that was installed on this device.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.VersionTracking.IsFirstLaunchEver">
            <summary>Gets a value indicating whether this is the first time this app has ever been launched on this device.</summary>
            <value />
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.VersionTracking.IsFirstLaunchForBuild(System.String)">
            <param name="build">The build number.</param>
            <summary>Determines if this is the first launch of the app for a specified build number.</summary>
            <returns>Returns true if this is the first launch of the app for the specified build number; otherwise false.</returns>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.VersionTracking.IsFirstLaunchForCurrentBuild">
            <summary>Gets a value indicating if this is the first launch of the app for the current build number.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.VersionTracking.IsFirstLaunchForCurrentVersion">
            <summary>Gets a value indicating if this is the first launch of the app for the current version number.</summary>
            <value />
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.VersionTracking.IsFirstLaunchForVersion(System.String)">
            <param name="version">The version number.</param>
            <summary>Determines if this is the first launch of the app for a specified version number.</summary>
            <returns>Returns true if this is the first launch of the app for the specified version number; otherwise false.</returns>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.VersionTracking.PreviousBuild">
            <summary>Gets the build number for the previously run version.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.VersionTracking.PreviousVersion">
            <summary>Gets the version number for the previously run version.</summary>
            <value />
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.VersionTracking.Track">
            <summary>Starts tracking version information.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.VersionTracking.VersionHistory">
            <summary>Gets the collection of version numbers of the app that ran on this device.</summary>
            <value />
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.Vibration">
            <summary>Provides an easy way to make the device vibrate.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Vibration.Cancel">
            <summary>Cancel any current vibrations.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Vibration.Vibrate">
            <summary>Vibrate the device fo 500ms.</summary>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.Vibration.Vibrate(System.Double)">
            <param name="duration">The number of milliseconds to vibrate for.</param>
            <summary>Vibrate the device for the specified number of milliseconds in the range [0, 5000].</summary>
            <remarks>On iOS, the device will only vibrate for 500ms, regardless of the value specified.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.Vibration.Vibrate(System.TimeSpan)">
            <param name="duration">The time to vibrate for.</param>
            <summary>Vibrate the device for the specified time in the range [0, 5000]ms.</summary>
            <remarks>On iOS, the device will only vibrate for 500ms, regardless of the value specified.</remarks>
        </member>
        <member name="T:Xamarin.Essentials.WebAuthenticator">
            <summary>A web navigation API intended to be used for Authentication with external web services such as OAuth.</summary>
            <remarks>This API helps with navigating to a start URL and waiting for a callback URL to the app.  Your app must be registered to handle the callback scheme you provide in the call to authenticate.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.WebAuthenticator.AuthenticateAsync(System.Uri,System.Uri)">
            <param name="url">Url to navigate to, beginning the authentication flow.</param>
            <param name="callbackUrl">Expected callback url that the navigation flow will eventually redirect to.</param>
            <summary>Begin an authentication flow by navigating to the specified url and waiting for a callback/redirect to the callbackUrl scheme.</summary>
            <returns>Returns a result parsed out from the callback url.</returns>
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.WebAuthenticatorCallbackActivity">
            <summary>The activity meant to be subclassed and implemented to receive callbacks on Android.</summary>
            <remarks>This activity should be decorated with the appropriate Intent Filter to handle callbacks to the appropriate URI scheme.</remarks>
        </member>
        <member name="C:Xamarin.Essentials.WebAuthenticatorCallbackActivity">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Xamarin.Essentials.WebAuthenticatorCallbackActivity.OnCreate(Android.OS.Bundle)">
            <param name="savedInstanceState" />
            <summary>This method should be called from the same method in the parent activity which initiated the web authentication.</summary>
            <remarks />
        </member>
        <member name="T:Xamarin.Essentials.WebAuthenticatorResult">
            <summary>Web Authenticator Result parsed from the callback Url.</summary>
            <remarks>All of the querystring or url fragment properties are parsed into a dictionary and can be accessed by their key.</remarks>
        </member>
        <member name="C:Xamarin.Essentials.WebAuthenticatorResult">
            <summary />
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Essentials.WebAuthenticatorResult(System.Collections.Generic.IDictionary{System.String,System.String})">
            <param name="properties">To be added.</param>
            <summary>Create a new instance from an existing dictionary.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Xamarin.Essentials.WebAuthenticatorResult(System.Uri)">
            <param name="uri">To be added.</param>
            <summary>Create a new instance by parsing a Uri's querystring parameters.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.WebAuthenticatorResult.AccessToken">
            <summary>The value for the `access_token` key.</summary>
            <value>Access Token parsed from the callback URI access_token parameter.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.WebAuthenticatorResult.ExpiresIn">
            <summary>The expiry date as calculated by the timestamp of when the result was created plus the value in seconds for the `expires_in` key.</summary>
            <value>Timestamp of the creation of the object instance plus the expires_in seconds parsed from the callback URI.</value>
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.WebAuthenticatorResult.Get(System.String)">
            <param name="key">Key from the callback URI's query string.</param>
            <summary>Gets a value for a given key from the dictionary.</summary>
            <returns />
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.WebAuthenticatorResult.IdToken">
            <summary>The value for the `id_token` key.</summary>
            <value>The value for the `id_token` key.</value>
            <remarks>Apple doesn't return an access token on iOS native sign in, but it does return id_token as a JWT.</remarks>
        </member>
        <member name="P:Xamarin.Essentials.WebAuthenticatorResult.Properties">
            <summary>The dictionary of key/value pairs parsed form the callback URI's querystring.</summary>
            <value />
            <remarks />
        </member>
        <member name="M:Xamarin.Essentials.WebAuthenticatorResult.Put(System.String,System.String)">
            <param name="key" />
            <param name="value" />
            <summary>Puts a key/value pair into the dictionary.</summary>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.WebAuthenticatorResult.RefreshToken">
            <summary>The value for the `refresh_token` key.</summary>
            <value>Refresh Token parsed from the callback URI refresh_token parameter.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.WebAuthenticatorResult.RefreshTokenExpiresIn">
            <summary>The refresh token expiry date as calculated by the timestamp of when the result was created plus the value in seconds for the refresh_token_expires_in key.</summary>
            <value>Timestamp of the creation of the object instance plus the expires_in seconds parsed from the callback URI.</value>
            <remarks />
        </member>
        <member name="P:Xamarin.Essentials.WebAuthenticatorResult.Timestamp">
            <summary>The timestamp when the class was instantiated, which usually corresponds with the parsed result of a request.</summary>
            <value />
            <remarks />
        </member>
    </members>
</doc>
